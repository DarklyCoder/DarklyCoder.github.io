{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1}],"Cache":[{"_id":"source/404.html","shasum":"004ede0cb534fe73e55ddab26f2303f25a2bcac2","modified":1462762528174},{"_id":"source/_posts/Android-Camera实时滤镜(1).md","shasum":"1c47e75f1b8eacfdc0caa8f611fde25ac9da507b","modified":1463120941242},{"_id":"source/_posts/Android-MediaPlayer状态机.md","shasum":"be8a6799bfc7faafa681e02b95871f9d203f5c4d","modified":1462777595996},{"_id":"source/_posts/Android-ffmpeg编译环境搭建.md","shasum":"24d4b968d38a6d8f7cf49a60d03e97c8cba661eb","modified":1463120658101},{"_id":"source/_posts/Android-RenderScript介绍.md","shasum":"658a33041f1b9320532df6caf2c726948367c5fa","modified":1462778733459},{"_id":"source/_posts/Android-关于AudioFocus.md","shasum":"3355278d44352f02df54e5aac6911d8c2e7ab953","modified":1463120953948},{"_id":"source/_posts/Android-基础知识汇总.md","shasum":"df3f59c11d6a2be74f1cd9a7e0f60f1aaa74a046","modified":1462777357007},{"_id":"source/_posts/Android-搭建OpenCV开发环境.md","shasum":"1f063c05e885aa0c30941ed0a261d37225bdf0ff","modified":1462845366520},{"_id":"source/_posts/Java-遍历map.md","shasum":"6fd695fef2d51c3b07d87b01451311be9c0989b4","modified":1462870628889},{"_id":"source/about/index.md","shasum":"d81a1400bbb8ec9779c131760d9f7081988ea322","modified":1462762528189},{"_id":"source/_posts/华为手机开启Log日志方法.md","shasum":"4629b9226c28bd33825636f43b661616b8ffeb0d","modified":1462845366521},{"_id":"source/_posts/Java-StringFormat使用.md","shasum":"8278c1140e4fe8bd7c4d3d75d2e17b7aab28c400","modified":1462777513352},{"_id":"source/categories/index.md","shasum":"3fa79d98705bd01c13501d97ab9f8ac6a7ef5b84","modified":1462762528189},{"_id":"source/robots.txt","shasum":"9345c7fffd19714ba7169ea645f554dd6a1992a0","modified":1462762528189},{"_id":"source/tags/index.md","shasum":"e01e8cdf049d2eee1042c5128db1ac52ae08e13a","modified":1462762528189},{"_id":"source/_posts/Android-高斯模糊实现方案.md","shasum":"e0e6ebda6cfe90eff467669f493267461f5cdc6b","modified":1462787169017},{"_id":"source/favicon.ico","shasum":"9d2bf6e2cf06bd65cf61a8e47599e0af5adc1f29","modified":1462762528189},{"_id":"source/bookmarks.html","shasum":"273a8a129ce800bfb3ab59c74885435d8a143ccc","modified":1462762528189},{"_id":"source/_posts/sublime插件安装.md","shasum":"3affb924dba13bf0275e6a7ecd26d60ce9f17827","modified":1462763378066},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462762528205},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462762528205},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462762528236},{"_id":"themes/next/source/css/_mixins/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462762528236},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462762528252},{"_id":"themes/next/source/css/_variables/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462762528252},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462762528252},{"_id":"themes/next/_config.yml","shasum":"d66ea8cfa6ec69069adb55c425623dedf5391aed","modified":1462778008480},{"_id":"themes/next/gulpfile.coffee","shasum":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1462762528189},{"_id":"themes/next/README.en.md","shasum":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1462762528189},{"_id":"themes/next/README.md","shasum":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1462762528189},{"_id":"themes/next/bower.json","shasum":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1462762528189},{"_id":"themes/next/languages/de.yml","shasum":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1462762528189},{"_id":"themes/next/languages/default.yml","shasum":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1462762528189},{"_id":"themes/next/languages/en.yml","shasum":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1462762528189},{"_id":"themes/next/languages/id.yml","shasum":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1462762528189},{"_id":"themes/next/languages/fr-FR.yml","shasum":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1462762528189},{"_id":"themes/next/languages/ja.yml","shasum":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1462762528189},{"_id":"themes/next/languages/pt.yml","shasum":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1462762528189},{"_id":"themes/next/languages/ru.yml","shasum":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1462762528189},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1462762528189},{"_id":"themes/next/languages/zh-tw.yml","shasum":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1462762528189},{"_id":"themes/next/languages/zh-hk.yml","shasum":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1462762528189},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1462762528189},{"_id":"themes/next/layout/_layout.swig","shasum":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1462762528189},{"_id":"themes/next/layout/_partials/comments.swig","shasum":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1462762528205},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","shasum":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1462762528189},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","shasum":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1462762528205},{"_id":"themes/next/layout/_macro/reward.swig","shasum":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1462762528189},{"_id":"themes/next/layout/_macro/post.swig","shasum":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1462762528189},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1462762528205},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1462762528189},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1462762528205},{"_id":"themes/next/layout/_partials/search/localsearch.swig","shasum":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1462762528205},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1462762528205},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","shasum":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1462762528205},{"_id":"themes/next/layout/_partials/share/add-this.swig","shasum":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1462762528205},{"_id":"themes/next/layout/_partials/search.swig","shasum":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1462762528205},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1462762528205},{"_id":"themes/next/layout/_partials/header.swig","shasum":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1462762528205},{"_id":"themes/next/layout/_partials/head.swig","shasum":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1462762528205},{"_id":"themes/next/layout/_scripts/baidu-push.swig","shasum":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1462762528205},{"_id":"themes/next/layout/_scripts/boostrap.swig","shasum":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1462762528205},{"_id":"themes/next/layout/_scripts/commons.swig","shasum":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1462762528205},{"_id":"themes/next/layout/_partials/share/baidushare.swig","shasum":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1462762528205},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","shasum":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1462762528205},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","shasum":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1462762528205},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","shasum":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","shasum":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","shasum":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","shasum":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1462762528205},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"12684840de632eb16e53ffa863166306a756fd4f","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","shasum":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","shasum":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","shasum":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","shasum":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","shasum":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","shasum":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","shasum":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1462762528205},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","shasum":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1462762528205},{"_id":"themes/next/layout/index.swig","shasum":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1462762528220},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","shasum":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1462762528220},{"_id":"themes/next/layout/archive.swig","shasum":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1462762528220},{"_id":"themes/next/layout/_scripts/vendors.swig","shasum":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1462762528220},{"_id":"themes/next/layout/category.swig","shasum":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1462762528220},{"_id":"themes/next/scripts/merge-configs.js","shasum":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1462762528220},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"99b66949f18398689b904907af23c013be1b978f","modified":1462762528220},{"_id":"themes/next/layout/page.swig","shasum":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1462762528220},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1462762528220},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","shasum":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1462762528220},{"_id":"themes/next/layout/post.swig","shasum":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/components.styl","shasum":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/comments.styl","shasum":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","shasum":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/header/header.styl","shasum":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1462762528220},{"_id":"themes/next/layout/tag.swig","shasum":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","shasum":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1462762528220},{"_id":"themes/next/package.json","shasum":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/buttons.styl","shasum":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","shasum":"1727702eac5d326b5c81a667944a245016668231","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","shasum":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/header/menu.styl","shasum":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","shasum":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","shasum":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","shasum":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","shasum":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","shasum":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","shasum":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","shasum":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","shasum":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/pagination.styl","shasum":"88559b13ce94311405b170a0506ded91273beceb","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","shasum":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","shasum":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","shasum":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","shasum":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","shasum":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1462762528220},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","shasum":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","shasum":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","shasum":"01567edaea6978628aa5521a122a85434c418bfd","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","shasum":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","shasum":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","shasum":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/post/post.styl","shasum":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","shasum":"1153bb71edf253765145559674390e16dd67c633","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","shasum":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","shasum":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","shasum":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","shasum":"394888efec32749b353292a59ec7f1b609d6325e","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","shasum":"dd941824210733588841897457e0cc9697ca5608","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","shasum":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","shasum":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","shasum":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","shasum":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","shasum":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","shasum":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","shasum":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","shasum":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","shasum":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","shasum":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1462762528236},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","shasum":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1462762528236},{"_id":"themes/next/source/css/_common/outline/outline.styl","shasum":"12662536c7a07fff548abe94171f34b768dd610f","modified":1462762528236},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","shasum":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1462762528236},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","shasum":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1462762528236},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1462762528236},{"_id":"themes/next/source/css/_mixins/Pisces.styl","shasum":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1462762528252},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","shasum":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1462762528236},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1462762528252},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","shasum":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1462762528236},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1462762528252},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","shasum":"ea9069645696f86c5df64208490876fe150c8cae","modified":1462762528236},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","shasum":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1462762528252},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","shasum":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1462762528236},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","shasum":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","shasum":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","shasum":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","shasum":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","shasum":"124b540f059fd1ed13514362007cfc70355278c6","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","shasum":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","shasum":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","shasum":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","shasum":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","shasum":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","shasum":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1462762528252},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","shasum":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","shasum":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","shasum":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1462762528252},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","shasum":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1462762528252},{"_id":"themes/next/source/css/_variables/Pisces.styl","shasum":"b8e3663996b39590509d843f674360872b0242ac","modified":1462762528252},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"a7ae72e846393493385275d934eaa78534d9834c","modified":1462762528252},{"_id":"themes/next/source/css/main.styl","shasum":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1462762528252},{"_id":"themes/next/source/images/avatar.gif","shasum":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462762528252},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1462762528252},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1462762528252},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462762528267},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1462762528267},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462762528267},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1462762528252},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1462762528267},{"_id":"themes/next/source/images/quote-l.svg","shasum":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1462762528267},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1462762528267},{"_id":"themes/next/source/images/cc-by.svg","shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1462762528267},{"_id":"themes/next/source/images/quote-r.svg","shasum":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1462762528267},{"_id":"themes/next/source/js/src/affix.js","shasum":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1462762528267},{"_id":"themes/next/source/js/src/schemes/pisces.js","shasum":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1462762528267},{"_id":"themes/next/source/js/src/bootstrap.js","shasum":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1462762528267},{"_id":"themes/next/source/js/src/hook-duoshuo.js","shasum":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1462762528267},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462762528267},{"_id":"themes/next/source/js/src/post-details.js","shasum":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1462762528267},{"_id":"themes/next/source/js/src/motion.js","shasum":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1462762528267},{"_id":"themes/next/source/js/src/utils.js","shasum":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1462762528267},{"_id":"themes/next/source/js/src/scrollspy.js","shasum":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1462762528267},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1462762528283},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1462762528267},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1462762528267},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1462762528283},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1462762528283},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462762528283},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462762528298},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","shasum":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1462762528298},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","shasum":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1462762528298},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","shasum":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1462762528298},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","shasum":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1462762528298},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","shasum":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1462762528298},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","shasum":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1462762528298},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","shasum":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1462762528298},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1462762528298},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1462762528267},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1462762528298},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1462762528298},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1462762528298},{"_id":"themes/next/test/helpers.js","shasum":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1462762528298},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462762528283},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462762528283},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1462762528298},{"_id":"themes/next/test/intern.js","shasum":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1462762528298},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462762528283},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462762528298},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1462762528283},{"_id":"public/robots.txt","modified":1463121034881,"shasum":"9345c7fffd19714ba7169ea645f554dd6a1992a0"},{"_id":"public/favicon.ico","modified":1463121034897,"shasum":"9d2bf6e2cf06bd65cf61a8e47599e0af5adc1f29"},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1463121034897,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1463121034897,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1463121034897,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1463121034897,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1463121034912,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1463121034912,"shasum":"214dad442a92d36af77ed0ca1d9092b16687f02f"},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","modified":1463121034912,"shasum":"38628e75e4412cc6f11074e03e1c6d257aae495b"},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","modified":1463121034928,"shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1"},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","modified":1463121034928,"shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3"},{"_id":"public/vendors/jquery_lazyload/bower.json","modified":1463121034928,"shasum":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53"},{"_id":"public/vendors/jquery_lazyload/README.html","modified":1463121034959,"shasum":"c593e16f0d63d24b5d3933f3b9297884867ce4a0"},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","modified":1463121034975,"shasum":"bf8e477ee2d81833cff12572a8a5f61abffc187c"},{"_id":"public/vendors/jquery/index.js","modified":1463121034975,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1463121034975,"shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1463121034975,"shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1463121034975,"shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1463121034990,"shasum":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1463121034990,"shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6"},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","modified":1463121034990,"shasum":"0112e96f327d413938d37c1693806f468ffdbace"},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","modified":1463121034990,"shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22"},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","modified":1463121034990,"shasum":"1573904b82807abbb32c97a3632c6c6808eaac50"},{"_id":"public/vendors/font-awesome/css/font-awesome.css","modified":1463121034990,"shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7"},{"_id":"public/vendors/font-awesome/bower.json","modified":1463121034990,"shasum":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad"},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","modified":1463121035006,"shasum":"ed80b43dbc7e3009b2f436741b9796df8eb3be02"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1463121035006,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1463121035006,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1463121035006,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1463121035022,"shasum":"5bef8b8758435bc08129f6d374740527a6a9b942"},{"_id":"public/vendors/fastclick/LICENSE","modified":1463121035022,"shasum":"6f474ea75c42442da7bbcf2e9143ce98258efd8d"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1463121035022,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1463121035022,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1463121035037,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1463121035037,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1463121035037,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1463121035037,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1463121035037,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1463121035037,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1463121035053,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1463121035053,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1463121035053,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1463121035053,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1463121035053,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1463121035053,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1463121035053,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/src/utils.js","modified":1463121035053,"shasum":"e5cb720894c4bc28ca8f10b33df127fb394018d9"},{"_id":"public/js/src/scrollspy.js","modified":1463121035068,"shasum":"fe4da1b9fe73518226446f5f27d2831e4426fc35"},{"_id":"public/js/src/schemes/pisces.js","modified":1463121035068,"shasum":"7506e7490c69a200831393c38d25e91c156bd471"},{"_id":"public/js/src/post-details.js","modified":1463121035068,"shasum":"2038f54e289b6da5def09689e69f623187147be5"},{"_id":"public/js/src/motion.js","modified":1463121035068,"shasum":"269414e84df544a4ccb88519f6abae4943db3c67"},{"_id":"public/js/src/hook-duoshuo.js","modified":1463121035068,"shasum":"a6119070c0119f33e08b29da7d2cce2635eb40a0"},{"_id":"public/js/src/bootstrap.js","modified":1463121035068,"shasum":"39bf93769d9080fa01a9a875183b43198f79bc19"},{"_id":"public/js/src/affix.js","modified":1463121035068,"shasum":"978e0422b5bf1b560236d8d10ebc1adcf66392e3"},{"_id":"public/images/searchicon.png","modified":1463121035068,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/quote-r.svg","modified":1463121035084,"shasum":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41"},{"_id":"public/images/quote-l.svg","modified":1463121035084,"shasum":"cd108d6f44351cadf8e6742565217f88818a0458"},{"_id":"public/images/placeholder.gif","modified":1463121035084,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1463121035084,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1463121035115,"shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d"},{"_id":"public/images/cc-by.svg","modified":1463121035115,"shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70"},{"_id":"public/images/cc-by-sa.svg","modified":1463121035115,"shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398"},{"_id":"public/images/cc-by-nd.svg","modified":1463121035115,"shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8"},{"_id":"public/images/cc-by-nc.svg","modified":1463121035131,"shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1463121035131,"shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1463121035131,"shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668"},{"_id":"public/images/avatar.gif","modified":1463121035131,"shasum":"264082bb3a1af70d5499c7d22b0902cb454b6d12"},{"_id":"public/css/main.css","modified":1463121035599,"shasum":"6a01578631c4d1583be54717de570565ff374e42"},{"_id":"public/404.html","modified":1463121035817,"shasum":"f24122278beba3a0ed52600e57035a18351050cf"},{"_id":"public/tags/index.html","modified":1463121035895,"shasum":"a806e17da0feb018e080cd8a0fa302c13802347f"},{"_id":"public/categories/index.html","modified":1463121035925,"shasum":"4df21428f85a6abbae143c5f1d3e171cef65c08f"},{"_id":"public/bookmarks.html","modified":1463121035987,"shasum":"b2f586d0520d2733a71d6a60407372afb88ba875"},{"_id":"public/about/index.html","modified":1463121036034,"shasum":"2920327d01567dbba6721fbffe3255a9eaf2c65b"},{"_id":"public/2016/05/10/Android-ffmpeg编译环境搭建/index.html","modified":1463121036112,"shasum":"6c8145d018f7aa4648c1c9078687a152382d6d42"},{"_id":"public/2016/05/09/Android-搭建OpenCV开发环境/index.html","modified":1463121036190,"shasum":"ada4d98664f8d6ad687e2a642cf0a5da5e0f7fac"},{"_id":"public/2016/05/09/华为手机开启Log日志方法/index.html","modified":1463121036237,"shasum":"54f3ed7e12702780d9def8df71ca07d24b4ec7c5"},{"_id":"public/2016/05/09/Android-高斯模糊实现方案/index.html","modified":1463121036315,"shasum":"ed0c92247ac6d63c5454e3194b9060807e41e680"},{"_id":"public/2016/05/09/Android-RenderScript介绍/index.html","modified":1463121036377,"shasum":"7a7db34972055f4a2acf99bf9dcf580c2d42fc93"},{"_id":"public/2016/05/08/sublime插件安装/index.html","modified":1463121036440,"shasum":"6e4e611613facb5ce961c730aab5435ee778378f"},{"_id":"public/2016/05/01/Android-Camera实时滤镜(1)/index.html","modified":1463121036502,"shasum":"ffbc0e61316e9bf655aae1cc56189e204f127854"},{"_id":"public/2016/05/01/Android-基础知识汇总/index.html","modified":1463121036580,"shasum":"1f5c60bd8cdbeef51bf751b061a1bc27b6971860"},{"_id":"public/2013/07/27/Java-StringFormat使用/index.html","modified":1463121036642,"shasum":"39d318923ca785fe489cd36735603f2b1d1b3cac"},{"_id":"public/2013/07/27/Java-遍历map/index.html","modified":1463121036705,"shasum":"e2d6f832da496406252f0a9dc2ca5b0e8a7bfa1e"},{"_id":"public/2013/04/10/Android-关于AudioFocus/index.html","modified":1463121036799,"shasum":"19e9c3e7d7080a892ee7dc4d1a4ecffb3ec5fb4b"},{"_id":"public/2012/04/03/Android-MediaPlayer状态机/index.html","modified":1463121036862,"shasum":"7cb4d5ca3733fef7f871bd6f4125af7985381ac7"},{"_id":"public/index.html","modified":1463121036959,"shasum":"fefd7d5861ef128119690b5fb323cc44ffd2f30d"},{"_id":"public/page/2/index.html","modified":1463121037006,"shasum":"1d297ad8e2e3702b90c4104cf2f3ad7f06e88081"},{"_id":"public/archives/index.html","modified":1463121037084,"shasum":"8dc06ac8e49f9d0516a651adfbe4658cf31f8d22"},{"_id":"public/archives/page/2/index.html","modified":1463121037147,"shasum":"77db1c99ca39917ecaa278d13d23b0652bc13d1c"},{"_id":"public/archives/2012/index.html","modified":1463121037193,"shasum":"a4d0bedb943edf42250e0b2a851062540c249ed9"},{"_id":"public/archives/2012/04/index.html","modified":1463121037250,"shasum":"ba23b3af4e9d343ee5150bf217bc86b3fc01a78f"},{"_id":"public/archives/2013/index.html","modified":1463121037305,"shasum":"188cc309f81b91dfe0faa27628d7545cc187c61a"},{"_id":"public/archives/2013/04/index.html","modified":1463121037352,"shasum":"4493d56b00957909077900c5cc63b1d0a0a534be"},{"_id":"public/archives/2013/07/index.html","modified":1463121037414,"shasum":"2e4c0df2560a5f75d813f743e71585701705010f"},{"_id":"public/archives/2016/index.html","modified":1463121037492,"shasum":"eebf8929bbd9395558c3c7b663d703f828b65ecb"},{"_id":"public/archives/2016/05/index.html","modified":1463121037570,"shasum":"597d1afffb83ed95932fac3fd92f45863e082d43"},{"_id":"public/CNAME","modified":1463121037570,"shasum":"21c27da01917e536263e122750a5c6fbaf4fa518"},{"_id":"public/categories/开发技巧/index.html","modified":1463121037617,"shasum":"58679cdd2c1259697e03de30b49948139a88321a"},{"_id":"public/categories/tools/index.html","modified":1463121037664,"shasum":"75b7efa4f72f9c2a164fac815be1fbeca77b418e"},{"_id":"public/categories/Java/index.html","modified":1463121037711,"shasum":"37ccd03168b9e4179331967c68f1bc21f247a9a6"},{"_id":"public/categories/Android/index.html","modified":1463121037789,"shasum":"ebb6897d970b0e0d4b90064b57cb69f69c11a230"},{"_id":"public/categories/Android/MediaPlayer/index.html","modified":1463121037851,"shasum":"13e40103d579c09a0494ec81534e2cf289d9d91b"},{"_id":"public/categories/Android/Camera实时滤镜/index.html","modified":1463121037913,"shasum":"0d681a34fae3343ee79673c793d1bfc77b4182c9"},{"_id":"public/tags/开启Log/index.html","modified":1463121037974,"shasum":"685c9d7fb562d36a3fffb3c0f849b84f1806a267"},{"_id":"public/tags/华为/index.html","modified":1463121038037,"shasum":"4b0a35b9f7f2f381a80ec48047fd435736f53295"},{"_id":"public/tags/sublime/index.html","modified":1463121038099,"shasum":"abfd4008ceae76cbddb300708abdcae71f7f592c"},{"_id":"public/tags/插件/index.html","modified":1463121038161,"shasum":"ebaf13ea220e0f6590b40c17e950a45444deec38"},{"_id":"public/tags/Java/index.html","modified":1463121038223,"shasum":"dcdcc560bedf80e6e2508a92e158ff1f369845bc"},{"_id":"public/tags/遍历Map/index.html","modified":1463121038272,"shasum":"441ca40715945cf40ee6930b9ccc4f6909b0ee5b"},{"_id":"public/tags/String-format/index.html","modified":1463121038319,"shasum":"0c5e7fdafacd7a196f698a1823c3746d396117f2"},{"_id":"public/tags/Android/index.html","modified":1463121038381,"shasum":"0160f9d8d2dc0b710239549c770cd46129d46b57"},{"_id":"public/tags/高斯模糊/index.html","modified":1463121038428,"shasum":"c529d30a03b9ad14909886f1241fd0e71496ba91"},{"_id":"public/tags/RenderScript/index.html","modified":1463121038490,"shasum":"05a85edf86744d161cc1da5de9000b0606e169d0"},{"_id":"public/tags/OpenCV/index.html","modified":1463121038522,"shasum":"5c9d6afe72159fbebb6a7ac2f5fdf46978403ca9"},{"_id":"public/tags/基础知识/index.html","modified":1463121038568,"shasum":"d92d4f34bcd0e6e9631cf373f6510a09cdbae0e0"},{"_id":"public/tags/Audio-Focus/index.html","modified":1463121038615,"shasum":"fb37e13f30aede1826eab36cc6ad1d9184ef32f0"},{"_id":"public/tags/ffmpeg编译/index.html","modified":1463121038662,"shasum":"a98974c19b07e0fc98b212406d243ffaad570165"},{"_id":"public/tags/MediaPlayer/index.html","modified":1463121038709,"shasum":"95e82a4fa772321c7cf4971a93af45007a077eeb"},{"_id":"public/tags/状态机/index.html","modified":1463121038757,"shasum":"1f2290d921d7e31df5bad476abd3e047e4ff5548"},{"_id":"public/tags/camera/index.html","modified":1463121038803,"shasum":"7a43426eb4a81687b06f38eed73a17de2219eb2e"},{"_id":"public/tags/实时滤镜/index.html","modified":1463121038850,"shasum":"c4045c4786343cf5706e2987727a5bd6e6bb31d9"}],"Category":[{"name":"开发技巧","_id":"cio5chjf0000620mlj4s9f0j7"},{"name":"tools","_id":"cio5chjfg000d20mlnh79ltat"},{"name":"Java","_id":"cio5chjfg000k20ml67issfyn"},{"name":"Android","_id":"cio5chjfg000w20mlhq53vvwc"},{"name":"MediaPlayer","parent":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjgb001t20mlpyau0b8i"},{"name":"Camera实时滤镜","parent":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjgb002220mlrhbf8749"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://www.zhangqiyang.ren\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://www.zhangqiyang.ren\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","date":"2016-05-09T02:55:28.174Z","updated":"2016-05-09T02:55:28.174Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cio5chjb4000020mliam3gwta"},{"title":"tags","date":"2016-05-06T15:35:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-05-06 23:35:04\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-05-09T02:55:28.189Z","path":"tags/index.html","layout":"page","_id":"cio5chjf0000120mluyip44w9"},{"title":"categories","date":"2016-05-06T15:34:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2016-05-06 23:34:57\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-05-09T02:55:28.189Z","path":"categories/index.html","layout":"page","_id":"cio5chjf0000220mll1s177ne"},{"_content":"<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <title>Bookmarks</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"assets/css/main.css\"/>\n</head>\n\n<body>\n    <div class=\"vi\">\n        <div class=\"bookmarks\">\n\n            <h3 id=\"ios-path\">Vi's iOS Learning Path</h3>\n            <ul>\n                <li>\n                    <a href=\"https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html\" target=\"_blank\">\n                        The App Life Cycle - App Programming Guide for iOS\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html\" target=\"_blank\">\n                        Start Developing iOS Apps (Swift)\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/\" target=\"_blank\">\n                        The Swift Programming Language\n                    </a>\n                </li>\n            </ul>\n\n            <h3 id=\"dev-guides\">开发指南</h3>\n            <ul>\n                <li>\n                    <a href=\"http://dev.swiftguide.cn/\" target=\"_blank\">\n                        Swift 语言指南\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://guides.ruby-china.org/index.html\" target=\"_blank\">Ruby on Rails 指南</a>\n                </li>\n                <li>\n                    <a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\" target=\"_blank\">\n                        OWASP Guide Project\n                    </a>\n                </li>\n            </ul>\n\n\n            <h3 id=\"dev-references\">开发参考</h3>\n            <ul>\n                <li>\n                    <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html\" target=\"_blank\">\n                        Spring Web MVC framework\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://www.w3.org/TR/CSS2/\" target=\"_blank\">\n                        Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://es5.github.io/\" target=\"_blank\">\n                        Annotated ECMAScript 5.1\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://darobin.github.io/api-design-cookbook/\" target=\"_blank\">\n                        Web API Design Cookbook\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://apievangelist.com/\" target=\"_blank\">API Evangelist</a>\n                </li>\n                <li>\n                    <a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\">\n                        The introduction to Reactive Programming you've been missing\n                    </a>\n                </li>\n            </ul>\n\n            <h3 id=\"tutorials-books\">教程书籍</h3>\n            <ul>\n                <li>\n                    <a href=\"http://iissnan.com/progit/\" target=\"_blank\">\n                        Pro Git\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://docs.python-guide.org/en/latest/intro/learning/\" target=\"_blank\">\n                        Learning Python — The Hitchhiker's Guide to Python\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://diveintohtml5.info/index.html\" target=\"_blank\">\n                        DIVE INTO HTML5\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://learnvimscriptthehardway.stevelosh.com/\" target=\"_blank\">\n                        Learn Vimscript the Hard Way\n                    </a>\n                </li>\n\n            </ul>\n\n            <h3 id=\"online-tools\">在线工具</h3>\n            <ul>\n                <li><a href=\"http://regexr.com/\" target=\"_blank\">RegExr</a></li>\n                <li><a href=\"https://regex101.com/\" target=\"_blank\">Regex101</a></li>\n                <li><a href=\"https://stackedit.io/\" target=\"_blank\">StackEdit</a></li>\n            </ul>\n\n            <h3 id=\"tool-references\">工具参考</h3>\n            <ul>\n                <li><a href=\"https://developer.chrome.com/devtools/docs/console\" target=\"_blank\">Google Chrome - Using the Console</a></li>\n                <li><a href=\"https://developer.chrome.com/devtools/docs/shortcuts\" target=\"_blank\">Google Chrome - Keyboard Shortcuts</a></li>\n            </ul>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\" src=\"assets/vendors/jquery/index.js\"></script>\n</body>\n</html>","source":"bookmarks.html","raw":"<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <title>Bookmarks</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"assets/css/main.css\"/>\n</head>\n\n<body>\n    <div class=\"vi\">\n        <div class=\"bookmarks\">\n\n            <h3 id=\"ios-path\">Vi's iOS Learning Path</h3>\n            <ul>\n                <li>\n                    <a href=\"https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html\" target=\"_blank\">\n                        The App Life Cycle - App Programming Guide for iOS\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html\" target=\"_blank\">\n                        Start Developing iOS Apps (Swift)\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/\" target=\"_blank\">\n                        The Swift Programming Language\n                    </a>\n                </li>\n            </ul>\n\n            <h3 id=\"dev-guides\">开发指南</h3>\n            <ul>\n                <li>\n                    <a href=\"http://dev.swiftguide.cn/\" target=\"_blank\">\n                        Swift 语言指南\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://guides.ruby-china.org/index.html\" target=\"_blank\">Ruby on Rails 指南</a>\n                </li>\n                <li>\n                    <a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\" target=\"_blank\">\n                        OWASP Guide Project\n                    </a>\n                </li>\n            </ul>\n\n\n            <h3 id=\"dev-references\">开发参考</h3>\n            <ul>\n                <li>\n                    <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html\" target=\"_blank\">\n                        Spring Web MVC framework\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://www.w3.org/TR/CSS2/\" target=\"_blank\">\n                        Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://es5.github.io/\" target=\"_blank\">\n                        Annotated ECMAScript 5.1\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://darobin.github.io/api-design-cookbook/\" target=\"_blank\">\n                        Web API Design Cookbook\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://apievangelist.com/\" target=\"_blank\">API Evangelist</a>\n                </li>\n                <li>\n                    <a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\">\n                        The introduction to Reactive Programming you've been missing\n                    </a>\n                </li>\n            </ul>\n\n            <h3 id=\"tutorials-books\">教程书籍</h3>\n            <ul>\n                <li>\n                    <a href=\"http://iissnan.com/progit/\" target=\"_blank\">\n                        Pro Git\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://docs.python-guide.org/en/latest/intro/learning/\" target=\"_blank\">\n                        Learning Python — The Hitchhiker's Guide to Python\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://diveintohtml5.info/index.html\" target=\"_blank\">\n                        DIVE INTO HTML5\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://learnvimscriptthehardway.stevelosh.com/\" target=\"_blank\">\n                        Learn Vimscript the Hard Way\n                    </a>\n                </li>\n\n            </ul>\n\n            <h3 id=\"online-tools\">在线工具</h3>\n            <ul>\n                <li><a href=\"http://regexr.com/\" target=\"_blank\">RegExr</a></li>\n                <li><a href=\"https://regex101.com/\" target=\"_blank\">Regex101</a></li>\n                <li><a href=\"https://stackedit.io/\" target=\"_blank\">StackEdit</a></li>\n            </ul>\n\n            <h3 id=\"tool-references\">工具参考</h3>\n            <ul>\n                <li><a href=\"https://developer.chrome.com/devtools/docs/console\" target=\"_blank\">Google Chrome - Using the Console</a></li>\n                <li><a href=\"https://developer.chrome.com/devtools/docs/shortcuts\" target=\"_blank\">Google Chrome - Keyboard Shortcuts</a></li>\n            </ul>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\" src=\"assets/vendors/jquery/index.js\"></script>\n</body>\n</html>","date":"2016-05-09T02:55:28.189Z","updated":"2016-05-09T02:55:28.189Z","path":"bookmarks.html","title":"","comments":1,"layout":"page","_id":"cio5chjf0000320ml5pa2rbgy"},{"title":"about","date":"2016-05-06T15:34:09.000Z","comments":1,"_content":"\n　　我本是一个热爱生活的爱闹爱笑的boy，有一天看到乔丹的`JUST DO IT`的广告，大学我就毅然决然地走上了`IT`这条不归路！\n\n　　这几年一直在做Android应用层的东西，也换了2家公司。总的来说进步不小，能面不改色地应对无良产品的各种需求了，哈哈。现在正走在伪全栈开发工程师的路上！\n\n\n联系我:\nQQ:1319203686\n\n","source":"about/index.md","raw":"title: about\ndate: 2016-05-06 23:34:09\ncomments: true\n---\n\n　　我本是一个热爱生活的爱闹爱笑的boy，有一天看到乔丹的`JUST DO IT`的广告，大学我就毅然决然地走上了`IT`这条不归路！\n\n　　这几年一直在做Android应用层的东西，也换了2家公司。总的来说进步不小，能面不改色地应对无良产品的各种需求了，哈哈。现在正走在伪全栈开发工程师的路上！\n\n\n联系我:\nQQ:1319203686\n\n","updated":"2016-05-09T02:55:28.189Z","path":"about/index.html","layout":"page","_id":"cio5chjf0000420ml3zmwdjd2"}],"Post":[{"title":"华为手机开启Log日志方法","date":"2016-05-09T14:28:18.000Z","_content":"\n华为系列的手机为了提升性能默认是关闭日志输出的，这样就会给开发调试带来些许不便，那么怎么打开日志输出呢？\n\n* 进入拨号界面输入：\\*#\\*#2846579#\\*#\\*\n* 依次选择`ProjectMenu`->`后台设置`->`LOG设置`->`LOG开关` 点击打开\n","source":"_posts/华为手机开启Log日志方法.md","raw":"title: 华为手机开启Log日志方法\ndate: 2016-05-09 22:28:18\ncategories: \n    - 开发技巧\ntags:\n    - 开启Log\n    - 华为\n---\n\n华为系列的手机为了提升性能默认是关闭日志输出的，这样就会给开发调试带来些许不便，那么怎么打开日志输出呢？\n\n* 进入拨号界面输入：\\*#\\*#2846579#\\*#\\*\n* 依次选择`ProjectMenu`->`后台设置`->`LOG设置`->`LOG开关` 点击打开\n","slug":"华为手机开启Log日志方法","published":1,"updated":"2016-05-10T01:56:06.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjf0000520mlzkxvgqqi"},{"title":"sublime插件安装","date":"2016-05-08T10:08:20.000Z","_content":"\n1. 直接安装\n　　安装Sublime text插件很方便，可以直接下载安装包解压缩到Packages目录（菜单->preferences->packages）。\n<!-- more -->\n\n2. 使用Package Control组件安装\n　　也可以安装[package control](https://packagecontrol.io)组件，然后直接在线安装。按Ctrl+\\`调出console,粘贴代码(见package control)到底部命令行并回车，结束后重启Sublime Text。\n如果在Perferences->package settings中看到`package control`这一项，则安装成功。\n\n3. 用Package Control安装插件的方法\n　　按下`Ctrl+Shift+P`调出命令面板，输入install 调出`Install Package` 选项并回车，然后在列表中选中要安装的插件。\n\n","source":"_posts/sublime插件安装.md","raw":"title: sublime插件安装\ndate: 2016-5-8 18:08:20\ncategories: \n    - tools\ntags: \n    - sublime \n    - 插件\n---\n\n1. 直接安装\n　　安装Sublime text插件很方便，可以直接下载安装包解压缩到Packages目录（菜单->preferences->packages）。\n<!-- more -->\n\n2. 使用Package Control组件安装\n　　也可以安装[package control](https://packagecontrol.io)组件，然后直接在线安装。按Ctrl+\\`调出console,粘贴代码(见package control)到底部命令行并回车，结束后重启Sublime Text。\n如果在Perferences->package settings中看到`package control`这一项，则安装成功。\n\n3. 用Package Control安装插件的方法\n　　按下`Ctrl+Shift+P`调出命令面板，输入install 调出`Install Package` 选项并回车，然后在列表中选中要安装的插件。\n\n","slug":"sublime插件安装","published":1,"updated":"2016-05-09T03:09:38.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfg000c20ml2sypjkew"},{"title":"Java遍历Map集合","date":"2013-07-27T10:08:20.000Z","_content":"\n　　在java中经常会遇到遍历Map集合的使用场景。\n<!-- more -->\n#### 最常规的一种遍历方法，最常规就是最常用的，虽然不复杂，但很重要，这是我们最熟悉的，就不多说了！！\n    public static void work(Map<String, String> map) {\n        Collection<String> c = map.values();\n        Iterator it = c.iterator();\n        while (it.hasNext()) {\n            System.out.println(it.next());\n        }\n    }\n\n#### 利用keyset进行遍历,它的优点在于可以根据你所想要的key值得到你想要的 values，更具灵活性！！\n    public static void workByKeySet(Map<String, String> map) {\n        Set<String> key = map.keySet();\n        for (Iterator it = key.iterator(); it.hasNext();) {\n            String s = (String) it.next();\n            System.out.println(map.get(s));\n        }\n    }\n\n#### 比较复杂的一种遍历在这里，它的灵活性太强了，想得到什么就能得到什么！！\n    public static void workByEntry(Map<String, String> map) {\n        Set<Map.Entry<String, String>> set = map.entrySet();\n        for (Iterator<Map.Entry<String, String>> it = set.iterator(); it.hasNext();) {\n            Map.Entry<String, String> entry = (Map.Entry<String, String>) it.next();\n            System.out.println(entry.getKey() + \"--->\" + entry.getValue());\n        }\n    }\n","source":"_posts/Java-遍历map.md","raw":"title: Java遍历Map集合\ndate: 2013-7-27 18:08:20\ncategories: \n\t- Java\ntags: \n    - Java \n    - 遍历Map\n---\n\n　　在java中经常会遇到遍历Map集合的使用场景。\n<!-- more -->\n#### 最常规的一种遍历方法，最常规就是最常用的，虽然不复杂，但很重要，这是我们最熟悉的，就不多说了！！\n    public static void work(Map<String, String> map) {\n        Collection<String> c = map.values();\n        Iterator it = c.iterator();\n        while (it.hasNext()) {\n            System.out.println(it.next());\n        }\n    }\n\n#### 利用keyset进行遍历,它的优点在于可以根据你所想要的key值得到你想要的 values，更具灵活性！！\n    public static void workByKeySet(Map<String, String> map) {\n        Set<String> key = map.keySet();\n        for (Iterator it = key.iterator(); it.hasNext();) {\n            String s = (String) it.next();\n            System.out.println(map.get(s));\n        }\n    }\n\n#### 比较复杂的一种遍历在这里，它的灵活性太强了，想得到什么就能得到什么！！\n    public static void workByEntry(Map<String, String> map) {\n        Set<Map.Entry<String, String>> set = map.entrySet();\n        for (Iterator<Map.Entry<String, String>> it = set.iterator(); it.hasNext();) {\n            Map.Entry<String, String> entry = (Map.Entry<String, String>) it.next();\n            System.out.println(entry.getKey() + \"--->\" + entry.getValue());\n        }\n    }\n","slug":"Java-遍历map","published":1,"updated":"2016-05-10T08:57:08.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfg000j20mlo5v4k6xo"},{"title":"Java中String.format使用","date":"2013-07-27T10:08:20.000Z","_content":"\n　　在JDK1.5中，String类增加了一个非常有用的静态函数format(String  format, Objece...  argues)，可以将各类数据格式化为字符串并输出。其中format参数指定了输出的格式，是最复杂也是最难掌握的一点，而argues则是一系列等待被格式化的对象。该函数对c语言中printf函数的用法进行了一定的模仿，因此有c语言基础的人学起来会轻松许多。下面我们着重讨论一下format 参数的格式及含义。\n<!-- more -->\n　　format参数中可以包含不需要转化的字符串，这些字符串是你写什么，最终就输出什么。同时还包含一些特殊格式的内容，来指定将哪个对象来转换，以及转换成什么形式。这种特殊的格式通通以%index$开头，index从1开始取值，表示将第index个参数拿进来进行格式化。这一点比c语言要强一点， c语言只能按照参数的顺序依次格式化，而Java可以选择第n个参数来格式化。由于该函数可以对任意一个对象进行格式化，不同的对象适用的参数也不同，因此我们下面分类来讨论。\n\n#### 对整数进行格式化：%[index$][标识][最小宽度]转换方式 \n　　我们可以看到，格式化字符串由4部分组成，其中%[index$]的含义我们上面已经讲过，[最小宽度]的含义也很好理解，就是最终该整数转化的字符串最少包含多少位数字。我们来看看剩下2个部分的含义吧：\n\n##### 标识： \n    '-'    在最小宽度内左对齐，不可以与“用0填充”同时使用\n    '#'    只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x\n    '+'    结果总是包括一个符号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）\n    '  '    正值前加空格，负值前加负号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）\n    '0'    结果将用零来填充\n    ','    只适用于10进制，每3位数字之间用“，”分隔\n    '('    若参数是负数，则结果中不添加负号而是用圆括号把数字括起来（同‘+’具有同样的限制）\n\n##### 转换方式：\n    d-十进制   o-八进制   x或X-十六进制\n\n　　上面的说明过于枯燥，我们来看几个具体的例子。需要特别注意的一点是：大部分标识字符可以同时使用。\n\n    System.out.println(String.format(\"%1$,09d\", -3123));  //-0003,123\n    System.out.println(String.format(\"%1$9d\", -31));      //      -31\n    System.out.println(String.format(\"%1$-9d\", -31));     //-31 \n    System.out.println(String.format(\"%1$(9d\", -31));     //     (31)\n    System.out.println(String.format(\"%1$#9x\", 5689));    //   0x1639\n\n#### 对浮点数进行格式化：%[index$][标识][最少宽度][.精度]转换方式\n　　我们可以看到，浮点数的转换多了一个“精度”选项，可以控制小数点后面的位数。\n\n##### 标识：\n    '-'    在最小宽度内左对齐，不可以与“用0填充”同时使用\n    '+'    结果总是包括一个符号\n    '  '    正值前加空格，负值前加负号\n    '0'    结果将用零来填充\n    ','    每3位数字之间用“，”分隔（只适用于fgG的转换）\n    '('    若参数是负数，则结果中不添加负号而是用圆括号把数字括起来（只适用于eEfgG的转换）\n\n##### 转换方式：\n    'e', 'E'  --  结果被格式化为用计算机科学记数法表示的十进制数\n    'f'       --  结果被格式化为十进制普通表示方式\n    'g', 'G'  --  根据具体情况，自动选择用普通表示方式还是科学计数法方式\n    'a', 'A'  --   结果被格式化为带有效位数和指数的十六进制浮点数\n\n#### 对字符进行格式化：\n　　对字符进行格式化是非常简单的，c表示字符，标识中'-'表示左对齐，其他就没什么了。\n\n#### 对百分比符号进行格式化：\n　　看了上面的说明，大家会发现百分比符号“%”是特殊格式的一个前缀。那么我们要输入一个百分比符号该怎么办呢？肯定是需要转义字符的,但是要注意的是，在这里转义字符不是“\\”，而是“%”。换句话说，下面这条语句可以输出一个“12%”：\n`System.out.println(String.format(\"%1$d%%\", 12));`\n\n#### 取得平台独立的行分隔符：\n　　`System.getProperty(\"line.separator\")`可以取得平台独立的行分隔符，但是用在format中间未免显得过于烦琐了。于是format函数自带了一个平台独立的行分隔符那就是`String.format(\"%n\")`。\n\n#### 对日期类型进行格式化：\n　　以下日期和时间转换的后缀字符是为 't' 和 'T' 转换定义的。这些类型相似于但不完全等同于那些由 GNU date 和 POSIX strftime(3c) 定义的类型。提供其他转换类型是为了访问特定于 Java 的功能（如将 'L' 用作秒中的毫秒）。\n\n##### 以下转换字符用来格式化时间：\n    'H'     24 小时制的小时，被格式化为必要时带前导零的两位数，即 00 - 23。\n    'I'     12 小时制的小时，被格式化为必要时带前导零的两位数，即 01 - 12。\n    'k'     24 小时制的小时，即 0 - 23。\n    'l'     12 小时制的小时，即 1 - 12。\n    'M'     小时中的分钟，被格式化为必要时带前导零的两位数，即 00 - 59。\n    'S'     分钟中的秒，被格式化为必要时带前导零的两位数，即 00 - 60 （\"60\" 是支持闰秒所需的一个特殊值）。\n    'L'     秒中的毫秒，被格式化为必要时带前导零的三位数，即 000 - 999。\n    'N'     秒中的毫微秒，被格式化为必要时带前导零的九位数，即 000000000 - 999999999。\n    'p'     特定于语言环境的 上午或下午 标记以小写形式表示，例如 \"am\" 或 \"pm\"。使用转换前缀 'T' 可以强行将此输出转换为大写形式。\n    'z'     相对于 GMT 的 RFC 822 格式的数字时区偏移量，例如 -0800。\n    'Z'     表示时区缩写形式的字符串。Formatter 的语言环境将取代参数的语言环境（如果有）。\n    's'     自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的秒数，即 Long.MIN_VALUE/1000 与 Long.MAX_VALUE/1000 之间的差值。\n    'Q'     自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的毫秒数，即 Long.MIN_VALUE 与 Long.MAX_VALUE 之间的差值。\n\n##### 以下转换字符用来格式化日期：\n    'B'     特定于语言环境的月份全称，例如 \"January\" 和 \"February\"。\n    'b'     特定于语言环境的月份简称，例如 \"Jan\" 和 \"Feb\"。\n    'h'     与 'b' 相同。\n    'A'     特定于语言环境的星期几全称，例如 \"Sunday\" 和 \"Monday\"\n    'a'     特定于语言环境的星期几简称，例如 \"Sun\" 和 \"Mon\"\n    'C'     除以 100 的四位数表示的年份，被格式化为必要时带前导零的两位数，即 00 - 99\n    'Y'     年份，被格式化为必要时带前导零的四位数（至少），例如，0092 等于格里高利历的 92 CE。\n    'y'     年份的最后两位数，被格式化为必要时带前导零的两位数，即 00 - 99。\n    'j'     一年中的天数，被格式化为必要时带前导零的三位数，例如，对于格里高利历是 001 - 366。\n    'm'     月份，被格式化为必要时带前导零的两位数，即 01 - 13。\n    'd'     一个月中的天数，被格式化为必要时带前导零两位数，即 01 - 31\n    'e'     一个月中的天数，被格式化为两位数，即 1 - 31。\n\n##### 以下转换字符用于格式化常见的日期/时间组合。\n    'R'     24 小时制的时间，被格式化为 \"%tH:%tM\"\n    'T'     24 小时制的时间，被格式化为 \"%tH:%tM:%tS\"。\n    'r'     12 小时制的时间，被格式化为 \"%tI:%tM:%tS %Tp\"。上午或下午标记 ('%Tp') 的位置可能与语言环境有关。 \n    'D'     日期，被格式化为 \"%tm/%td/%ty\"。\n    'F'     ISO 8601 格式的完整日期，被格式化为 \"%tY-%tm-%td\"。\n    'c'     日期和时间，被格式化为 \"%ta %tb %td %tT %tZ %tY\"，例如 \"Sun Jul 20 16:17:00 EDT 1969\"。","source":"_posts/Java-StringFormat使用.md","raw":"title: Java中String.format使用\ndate: 2013-7-27 18:08:20\ncategories: \n    - Java\ntags: \n    - Java \n    - String format\n---\n\n　　在JDK1.5中，String类增加了一个非常有用的静态函数format(String  format, Objece...  argues)，可以将各类数据格式化为字符串并输出。其中format参数指定了输出的格式，是最复杂也是最难掌握的一点，而argues则是一系列等待被格式化的对象。该函数对c语言中printf函数的用法进行了一定的模仿，因此有c语言基础的人学起来会轻松许多。下面我们着重讨论一下format 参数的格式及含义。\n<!-- more -->\n　　format参数中可以包含不需要转化的字符串，这些字符串是你写什么，最终就输出什么。同时还包含一些特殊格式的内容，来指定将哪个对象来转换，以及转换成什么形式。这种特殊的格式通通以%index$开头，index从1开始取值，表示将第index个参数拿进来进行格式化。这一点比c语言要强一点， c语言只能按照参数的顺序依次格式化，而Java可以选择第n个参数来格式化。由于该函数可以对任意一个对象进行格式化，不同的对象适用的参数也不同，因此我们下面分类来讨论。\n\n#### 对整数进行格式化：%[index$][标识][最小宽度]转换方式 \n　　我们可以看到，格式化字符串由4部分组成，其中%[index$]的含义我们上面已经讲过，[最小宽度]的含义也很好理解，就是最终该整数转化的字符串最少包含多少位数字。我们来看看剩下2个部分的含义吧：\n\n##### 标识： \n    '-'    在最小宽度内左对齐，不可以与“用0填充”同时使用\n    '#'    只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x\n    '+'    结果总是包括一个符号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）\n    '  '    正值前加空格，负值前加负号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）\n    '0'    结果将用零来填充\n    ','    只适用于10进制，每3位数字之间用“，”分隔\n    '('    若参数是负数，则结果中不添加负号而是用圆括号把数字括起来（同‘+’具有同样的限制）\n\n##### 转换方式：\n    d-十进制   o-八进制   x或X-十六进制\n\n　　上面的说明过于枯燥，我们来看几个具体的例子。需要特别注意的一点是：大部分标识字符可以同时使用。\n\n    System.out.println(String.format(\"%1$,09d\", -3123));  //-0003,123\n    System.out.println(String.format(\"%1$9d\", -31));      //      -31\n    System.out.println(String.format(\"%1$-9d\", -31));     //-31 \n    System.out.println(String.format(\"%1$(9d\", -31));     //     (31)\n    System.out.println(String.format(\"%1$#9x\", 5689));    //   0x1639\n\n#### 对浮点数进行格式化：%[index$][标识][最少宽度][.精度]转换方式\n　　我们可以看到，浮点数的转换多了一个“精度”选项，可以控制小数点后面的位数。\n\n##### 标识：\n    '-'    在最小宽度内左对齐，不可以与“用0填充”同时使用\n    '+'    结果总是包括一个符号\n    '  '    正值前加空格，负值前加负号\n    '0'    结果将用零来填充\n    ','    每3位数字之间用“，”分隔（只适用于fgG的转换）\n    '('    若参数是负数，则结果中不添加负号而是用圆括号把数字括起来（只适用于eEfgG的转换）\n\n##### 转换方式：\n    'e', 'E'  --  结果被格式化为用计算机科学记数法表示的十进制数\n    'f'       --  结果被格式化为十进制普通表示方式\n    'g', 'G'  --  根据具体情况，自动选择用普通表示方式还是科学计数法方式\n    'a', 'A'  --   结果被格式化为带有效位数和指数的十六进制浮点数\n\n#### 对字符进行格式化：\n　　对字符进行格式化是非常简单的，c表示字符，标识中'-'表示左对齐，其他就没什么了。\n\n#### 对百分比符号进行格式化：\n　　看了上面的说明，大家会发现百分比符号“%”是特殊格式的一个前缀。那么我们要输入一个百分比符号该怎么办呢？肯定是需要转义字符的,但是要注意的是，在这里转义字符不是“\\”，而是“%”。换句话说，下面这条语句可以输出一个“12%”：\n`System.out.println(String.format(\"%1$d%%\", 12));`\n\n#### 取得平台独立的行分隔符：\n　　`System.getProperty(\"line.separator\")`可以取得平台独立的行分隔符，但是用在format中间未免显得过于烦琐了。于是format函数自带了一个平台独立的行分隔符那就是`String.format(\"%n\")`。\n\n#### 对日期类型进行格式化：\n　　以下日期和时间转换的后缀字符是为 't' 和 'T' 转换定义的。这些类型相似于但不完全等同于那些由 GNU date 和 POSIX strftime(3c) 定义的类型。提供其他转换类型是为了访问特定于 Java 的功能（如将 'L' 用作秒中的毫秒）。\n\n##### 以下转换字符用来格式化时间：\n    'H'     24 小时制的小时，被格式化为必要时带前导零的两位数，即 00 - 23。\n    'I'     12 小时制的小时，被格式化为必要时带前导零的两位数，即 01 - 12。\n    'k'     24 小时制的小时，即 0 - 23。\n    'l'     12 小时制的小时，即 1 - 12。\n    'M'     小时中的分钟，被格式化为必要时带前导零的两位数，即 00 - 59。\n    'S'     分钟中的秒，被格式化为必要时带前导零的两位数，即 00 - 60 （\"60\" 是支持闰秒所需的一个特殊值）。\n    'L'     秒中的毫秒，被格式化为必要时带前导零的三位数，即 000 - 999。\n    'N'     秒中的毫微秒，被格式化为必要时带前导零的九位数，即 000000000 - 999999999。\n    'p'     特定于语言环境的 上午或下午 标记以小写形式表示，例如 \"am\" 或 \"pm\"。使用转换前缀 'T' 可以强行将此输出转换为大写形式。\n    'z'     相对于 GMT 的 RFC 822 格式的数字时区偏移量，例如 -0800。\n    'Z'     表示时区缩写形式的字符串。Formatter 的语言环境将取代参数的语言环境（如果有）。\n    's'     自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的秒数，即 Long.MIN_VALUE/1000 与 Long.MAX_VALUE/1000 之间的差值。\n    'Q'     自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的毫秒数，即 Long.MIN_VALUE 与 Long.MAX_VALUE 之间的差值。\n\n##### 以下转换字符用来格式化日期：\n    'B'     特定于语言环境的月份全称，例如 \"January\" 和 \"February\"。\n    'b'     特定于语言环境的月份简称，例如 \"Jan\" 和 \"Feb\"。\n    'h'     与 'b' 相同。\n    'A'     特定于语言环境的星期几全称，例如 \"Sunday\" 和 \"Monday\"\n    'a'     特定于语言环境的星期几简称，例如 \"Sun\" 和 \"Mon\"\n    'C'     除以 100 的四位数表示的年份，被格式化为必要时带前导零的两位数，即 00 - 99\n    'Y'     年份，被格式化为必要时带前导零的四位数（至少），例如，0092 等于格里高利历的 92 CE。\n    'y'     年份的最后两位数，被格式化为必要时带前导零的两位数，即 00 - 99。\n    'j'     一年中的天数，被格式化为必要时带前导零的三位数，例如，对于格里高利历是 001 - 366。\n    'm'     月份，被格式化为必要时带前导零的两位数，即 01 - 13。\n    'd'     一个月中的天数，被格式化为必要时带前导零两位数，即 01 - 31\n    'e'     一个月中的天数，被格式化为两位数，即 1 - 31。\n\n##### 以下转换字符用于格式化常见的日期/时间组合。\n    'R'     24 小时制的时间，被格式化为 \"%tH:%tM\"\n    'T'     24 小时制的时间，被格式化为 \"%tH:%tM:%tS\"。\n    'r'     12 小时制的时间，被格式化为 \"%tI:%tM:%tS %Tp\"。上午或下午标记 ('%Tp') 的位置可能与语言环境有关。 \n    'D'     日期，被格式化为 \"%tm/%td/%ty\"。\n    'F'     ISO 8601 格式的完整日期，被格式化为 \"%tY-%tm-%td\"。\n    'c'     日期和时间，被格式化为 \"%ta %tb %td %tT %tZ %tY\"，例如 \"Sun Jul 20 16:17:00 EDT 1969\"。","slug":"Java-StringFormat使用","published":1,"updated":"2016-05-09T07:05:13.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfg000q20mlpwllb77h"},{"title":"Android-高斯模糊实现方案","date":"2016-05-09T09:27:48.000Z","_content":"\n　　一直想看一下Android上如何实现毛玻璃效果，今天闲着没事在网上搜索了一下，总结如下:\n* 使用RenderScript实现,参考[RxBlur](https://github.com/SmartDengg/RxBlur)\n* 使用FastBlur的java版实现,参考[stackblur](https://github.com/kikoso/android-stackblur)\n* 使用openGL实现，参考[Muzei](https://github.com/romannurik/muzei)\n\n　　我试了一下RenderScript和FastBlur实现，速度还可以，在使用高斯模糊前先进行图片缩放，这样速度会更快！\n","source":"_posts/Android-高斯模糊实现方案.md","raw":"title: Android-高斯模糊实现方案\ndate: 2016-05-09 17:27:48\ncategories: \n    - Android\ntags: \n    - Android \n    - 高斯模糊\n    - RenderScript\n---\n\n　　一直想看一下Android上如何实现毛玻璃效果，今天闲着没事在网上搜索了一下，总结如下:\n* 使用RenderScript实现,参考[RxBlur](https://github.com/SmartDengg/RxBlur)\n* 使用FastBlur的java版实现,参考[stackblur](https://github.com/kikoso/android-stackblur)\n* 使用openGL实现，参考[Muzei](https://github.com/romannurik/muzei)\n\n　　我试了一下RenderScript和FastBlur实现，速度还可以，在使用高斯模糊前先进行图片缩放，这样速度会更快！\n","slug":"Android-高斯模糊实现方案","published":1,"updated":"2016-05-09T09:46:09.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfg000v20mlefj9m25w"},{"title":"Android-搭建OpenCV开发环境","date":"2016-05-09T14:43:37.000Z","_content":"\n### 搭建OpenCV开发环境\n\n* 下载[OpenCV for Android](http://opencv.org/)。\n* 解压文件。samples目录下是样例代码，sdk目录下是我们需要用到的java层和jni层的代码，apk目录是manager的apk安装包。\n<!-- more -->\n\n　　其实OpenCV最简单的使用方式是使用manager，也就是使用apk目录下的安装包，安装对应的apk，将java层代码导入，使用`OpenCVLoader.initAsync()`加载库，之后你就可以直接用java代码调用Opencv相关的功能了。但是这种方式除了安装我们自己的apk还需要安装上面提到的manager的apk，用户体验十分不好，不推荐使用。下面介绍另外三种使用方式将完全脱离这个manager的apk。\n\n#### 前期准备\n\n1. 首先新建一个项目，将OpenCV中sdk目录下的native目录拷到项目根目录。\n<div align=center>\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/24e8a753-59ad-4940-9331-22e7184c3b0a.jpg\">\n</div>\n\n2. 新建jni目录，在里面新建两个文件:Android.mk和Application.mk。\n<div align=center>\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/83240985-6d24-462c-9c86-4415f638c5ff.jpg\">\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/bebd51c8-3665-4159-91c7-86dd7da918e4.jpg\">\n</div>\n\n3. 编辑`gradle.properties`文件，增加下面的属性使用旧版的ndk功能（不添加会使用实验性的ndk构建工具）\n\n        android.useDeprecatedNdk=true\n\n4. 编辑`local.properties`文件中配置ndk目录\n\n        ndk.dir=\"换成你自己的NDK路径\"\n\n5. 编辑`build.gradle`，在android节点中增加下面的代码\n\n        sourceSets.main.jni.srcDirs = []\n        //禁止自带的ndk功能\n        sourceSets.main.jniLibs.srcDirs = ['src/main/libs','src/main/jniLibs']\n        //重定向so目录为src/main/libs和src/main/jniLibs，原来为src/main/jniLibs\n\n        task ndkBuild(type: Exec, description: 'Compile JNI source with NDK') {\n            Properties properties = new Properties()\n            properties.load(project.rootProject.file('local.properties').newDataInputStream())\n            def ndkDir = properties.getProperty('ndk.dir')\n\n            if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {\n                commandLine \"$ndkDir/ndk-build.cmd\", '-C', file('src/main/jni').absolutePath\n            } else {\n                commandLine \"$ndkDir/ndk-build\", '-C', file('src/main/jni').absolutePath\n            }\n        }\n\n        tasks.withType(JavaCompile) {\n            compileTask -> compileTask.dependsOn ndkBuild\n        }\n\n        task ndkClean(type: Exec, description: 'Clean NDK Binaries') {\n            Properties properties = new Properties()\n            properties.load(project.rootProject.file('local.properties').newDataInputStream())\n            def ndkDir = properties.getProperty('ndk.dir')\n\n            if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {\n                commandLine \"$ndkDir/ndk-build.cmd\",'clean', '-C', file('src/main/jni').absolutePath\n            } else {\n                commandLine \"$ndkDir/ndk-build\",'clean', '-C', file('src/main/jni').absolutePath\n            }\n        }\n\n        clean.dependsOn 'ndkClean'\n\n6. 在之前新建的Application.mk中增加下面的内容\n\n        APP_STL := gnustl_static\n        APP_CPPFLAGS := -frtti -fexceptions\n        APP_ABI := armeabi armeabi-v7a\n        APP_PLATFORM := android-8\n\n7. 在Android.mk中增加下面的内容\n\n        LOCAL_PATH := $(call my-dir)\n        include $(CLEAR_VARS)\n\n        OpenCV_INSTALL_MODULES := on\n        OpenCV_CAMERA_MODULES := off\n\n        OPENCV_LIB_TYPE :=STATIC\n\n        ifeq (\"$(wildcard $(OPENCV_MK_PATH))\",\"\")\n        include ..\\..\\..\\..\\native\\jni\\OpenCV.mk #注意替换路径\n        else\n        include $(OPENCV_MK_PATH)\n        endif\n\n        LOCAL_MODULE := OpenCV\n        LOCAL_SRC_FILES :=\n        LOCAL_LDLIBS +=  -lm -llog\n\n        include $(BUILD_SHARED_LIBRARY)\n\n这时候，使用gradle构建一下，如果能成功构建出so，说明配置没问题，如下图，点击as右侧的gradle展开，双击ndkBuild进行构建\n<div align=center>\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/0adcd150-b368-45f3-bc61-cdf9db62625d.jpg\">\n</div>\n\n#### 使用静态的OpenCV库的方式\n\n* 声明java层的native方法\n\n        public class OpenCVHelper {\n\n            static {\n                System.loadLibrary(\"OpenCV\");\n            }\n\n            public static native int[] gray(int[] buf, int w, int h);\n        }\n\n* 使用javah命令生成头文件'javah -jni com.zqy.opencvdemo.OpenCVHelper'\n\n        /* DO NOT EDIT THIS FILE - it is machine generated */\n        #include <jni.h>\n        /* Header for class com_zqy_opencvdemo_OpenCVHelper */\n\n        #ifndef _Included_com_zqy_opencvdemo_OpenCVHelper\n        #define _Included_com_zqy_opencvdemo_OpenCVHelper\n        #ifdef __cplusplus\n        extern \"C\" {\n        #endif\n        /*\n         + Class:     com_zqy_opencvdemo_OpenCVHelper\n         + Method:    gray\n         + Signature: ([III)[I\n         */\n        JNIEXPORT jintArray JNICALL Java_com_zqy_opencvdemo_OpenCVHelper_gray\n          (JNIEnv *, jclass, jintArray, jint, jint);\n\n        #ifdef __cplusplus\n        }\n        #endif\n        #endif\n\n* 新建cpp文件，实现对应的方法，就是灰度处理\n\n        #include \"com_zqy_opencvdemo_OpenCVHelper.h\"\n        #include <stdio.h>\n        #include <stdlib.h>\n        #include <opencv2/opencv.hpp>\n\n        using namespace cv;\n\n        extern \"C\" {\n\n        JNIEXPORT jintArray JNICALL Java_com_zqy_opencvdemo_OpenCVHelper_gray(\n                JNIEnv *env, jclass obj, jintArray buf, int w, int h);\n\n        JNIEXPORT jintArray JNICALL Java_com_zqy_opencvdemo_OpenCVHelper_gray(\n                JNIEnv *env, jclass obj, jintArray buf, int w, int h) {\n\n            jint *cbuf;\n            cbuf = env->GetIntArrayElements(buf, JNI_FALSE );\n            if (cbuf == NULL) {\n                return 0;\n            }\n\n            Mat imgData(h, w, CV_8UC4, (unsigned char *) cbuf);\n\n            uchar* ptr = imgData.ptr(0);\n            for(int i = 0; i < w*h; i ++){\n                //计算公式：Y(亮度) = 0.299*R + 0.587*G + 0.114*B\n                //对于一个int四字节，其彩色值存储方式为：BGRA\n                int grayScale = (int)(ptr[4*i+2]*0.299 + ptr[4*i+1]*0.587 + ptr[4*i+0]*0.114);\n                ptr[4*i+1] = grayScale;\n                ptr[4*i+2] = grayScale;\n                ptr[4*i+0] = grayScale;\n            }\n\n            int size = w * h;\n            jintArray result = env->NewIntArray(size);\n            env->SetIntArrayRegion(result, 0, size, cbuf);\n            env->ReleaseIntArrayElements(buf, cbuf, 0);\n            return result;\n        }\n        }\n\n* 之后，需要将cpp文件编译进去，在Andorid.mk文件中加入\n\n        LOCAL_SRC_FILES := com_zqy_opencvdemo_OpenCVHelper.cpp\n\n* 然后在java层写个测试方法测试一下是否进行灰度化了\n\n        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);\n        int w = bitmap.getWidth(), h = bitmap.getHeight();\n        int[] pix = new int[w * h];\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n        int[] resultPixes = OpenCVHelper.gray(pix, w, h);\n        Bitmap result = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565);\n        result.setPixels(resultPixes, 0, w, 0, 0, w, h);\n        imageView.setImageBitmap(result);\n\n#### 使用动态的OpenCV库的方式\n\n* 在第一种基础上，修改Android.mk文件,修改`OPENCV_LIB_TYPE := STATIC`为`OPENCV_LIB_TYPE := SHARED`。这时候再用ndkBuild一下，你会发现会输出一些警告以及一部分红色的内容。生成的so库的大小为310k，小了好几倍。这时候如果你直接运行程序，会报错误，原因是我们使用的是动态库加载方式，还需要将依赖的so加进去，这个so就是图中的`libopencv_java3.so`，它在我们的最开始加到项目里的native目录中，将它按需拷到我们的jniLibs目录中去，既然我们使用了动态链接库，那么我们同样也可以使用java层的接口，优点是java开发速度相对快一点。\n\n#### 同时使用Java的API又使用JNI的接口的方式，此时编译时一般使用的是动态链接OpenCV库的方式。\n\n* 在第一种基础上，我们需要将sdk目录中的java代码拷到项目中去，但是`org.opencv.engine`包中是一个`aidl`，我们需要将它剪贴到aidl目录中去，最后还有一个资源文件attrs.xml，copy过来,build一下项目，不出意外应该会报错，这时候找到该类，引入自己的R文件包就可以了,再次build应该就不会有什么问题了。\n\n* java层的测试方法\n\n        OpenCVLoader.initDebug();\n        Mat rgbMat = new Mat();\n        Mat grayMat = new Mat();\n        Bitmap srcBitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);\n        Bitmap grayBitmap = Bitmap.createBitmap(srcBitmap.getWidth(), srcBitmap.getHeight(), Bitmap.Config.RGB_565);\n        Utils.bitmapToMat(srcBitmap, rgbMat);//convert original bitmap to Mat, R G B.\n        Imgproc.cvtColor(rgbMat, grayMat, Imgproc.COLOR_RGB2GRAY);//rgbMat to gray grayMat\n        Utils.matToBitmap(grayMat, grayBitmap); //convert mat to bitmap\n        imageView.setImageBitmap(grayBitmap);\n\n　　注意使用`OpenCVLoader.initDebug();`进行初始化而不是使用`OpenCVLoader.initAsync()`。这种方法的特点是处理都在java层，不怎么会涉及jni层的代码，除非java层完成不了的工作会转移到jni层去。\n\n三种方法各有各的优点，根据自己的情况进行选择：\n\n* 如果c++特别好的，建议使用第一种方法\n* 如果更习惯java代码的，并且java层的函数都能进行处理的，建议选择第三种方法\n* 第二种方法建议在第三种方法不满足条件的情况下进行辅助使用，因为使用了第三种方法的前提是使用第二种方法的动态链接库。\n","source":"_posts/Android-搭建OpenCV开发环境.md","raw":"title: Android-搭建OpenCV开发环境\ndate: 2016-05-09 22:43:37\ncategories:\n    - Android\ntags:\n    - Android\n    - OpenCV\n---\n\n### 搭建OpenCV开发环境\n\n* 下载[OpenCV for Android](http://opencv.org/)。\n* 解压文件。samples目录下是样例代码，sdk目录下是我们需要用到的java层和jni层的代码，apk目录是manager的apk安装包。\n<!-- more -->\n\n　　其实OpenCV最简单的使用方式是使用manager，也就是使用apk目录下的安装包，安装对应的apk，将java层代码导入，使用`OpenCVLoader.initAsync()`加载库，之后你就可以直接用java代码调用Opencv相关的功能了。但是这种方式除了安装我们自己的apk还需要安装上面提到的manager的apk，用户体验十分不好，不推荐使用。下面介绍另外三种使用方式将完全脱离这个manager的apk。\n\n#### 前期准备\n\n1. 首先新建一个项目，将OpenCV中sdk目录下的native目录拷到项目根目录。\n<div align=center>\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/24e8a753-59ad-4940-9331-22e7184c3b0a.jpg\">\n</div>\n\n2. 新建jni目录，在里面新建两个文件:Android.mk和Application.mk。\n<div align=center>\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/83240985-6d24-462c-9c86-4415f638c5ff.jpg\">\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/bebd51c8-3665-4159-91c7-86dd7da918e4.jpg\">\n</div>\n\n3. 编辑`gradle.properties`文件，增加下面的属性使用旧版的ndk功能（不添加会使用实验性的ndk构建工具）\n\n        android.useDeprecatedNdk=true\n\n4. 编辑`local.properties`文件中配置ndk目录\n\n        ndk.dir=\"换成你自己的NDK路径\"\n\n5. 编辑`build.gradle`，在android节点中增加下面的代码\n\n        sourceSets.main.jni.srcDirs = []\n        //禁止自带的ndk功能\n        sourceSets.main.jniLibs.srcDirs = ['src/main/libs','src/main/jniLibs']\n        //重定向so目录为src/main/libs和src/main/jniLibs，原来为src/main/jniLibs\n\n        task ndkBuild(type: Exec, description: 'Compile JNI source with NDK') {\n            Properties properties = new Properties()\n            properties.load(project.rootProject.file('local.properties').newDataInputStream())\n            def ndkDir = properties.getProperty('ndk.dir')\n\n            if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {\n                commandLine \"$ndkDir/ndk-build.cmd\", '-C', file('src/main/jni').absolutePath\n            } else {\n                commandLine \"$ndkDir/ndk-build\", '-C', file('src/main/jni').absolutePath\n            }\n        }\n\n        tasks.withType(JavaCompile) {\n            compileTask -> compileTask.dependsOn ndkBuild\n        }\n\n        task ndkClean(type: Exec, description: 'Clean NDK Binaries') {\n            Properties properties = new Properties()\n            properties.load(project.rootProject.file('local.properties').newDataInputStream())\n            def ndkDir = properties.getProperty('ndk.dir')\n\n            if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {\n                commandLine \"$ndkDir/ndk-build.cmd\",'clean', '-C', file('src/main/jni').absolutePath\n            } else {\n                commandLine \"$ndkDir/ndk-build\",'clean', '-C', file('src/main/jni').absolutePath\n            }\n        }\n\n        clean.dependsOn 'ndkClean'\n\n6. 在之前新建的Application.mk中增加下面的内容\n\n        APP_STL := gnustl_static\n        APP_CPPFLAGS := -frtti -fexceptions\n        APP_ABI := armeabi armeabi-v7a\n        APP_PLATFORM := android-8\n\n7. 在Android.mk中增加下面的内容\n\n        LOCAL_PATH := $(call my-dir)\n        include $(CLEAR_VARS)\n\n        OpenCV_INSTALL_MODULES := on\n        OpenCV_CAMERA_MODULES := off\n\n        OPENCV_LIB_TYPE :=STATIC\n\n        ifeq (\"$(wildcard $(OPENCV_MK_PATH))\",\"\")\n        include ..\\..\\..\\..\\native\\jni\\OpenCV.mk #注意替换路径\n        else\n        include $(OPENCV_MK_PATH)\n        endif\n\n        LOCAL_MODULE := OpenCV\n        LOCAL_SRC_FILES :=\n        LOCAL_LDLIBS +=  -lm -llog\n\n        include $(BUILD_SHARED_LIBRARY)\n\n这时候，使用gradle构建一下，如果能成功构建出so，说明配置没问题，如下图，点击as右侧的gradle展开，双击ndkBuild进行构建\n<div align=center>\n    <img src=\"http://www.sxt.cn/editor/attached/image/20151101/714238790/0adcd150-b368-45f3-bc61-cdf9db62625d.jpg\">\n</div>\n\n#### 使用静态的OpenCV库的方式\n\n* 声明java层的native方法\n\n        public class OpenCVHelper {\n\n            static {\n                System.loadLibrary(\"OpenCV\");\n            }\n\n            public static native int[] gray(int[] buf, int w, int h);\n        }\n\n* 使用javah命令生成头文件'javah -jni com.zqy.opencvdemo.OpenCVHelper'\n\n        /* DO NOT EDIT THIS FILE - it is machine generated */\n        #include <jni.h>\n        /* Header for class com_zqy_opencvdemo_OpenCVHelper */\n\n        #ifndef _Included_com_zqy_opencvdemo_OpenCVHelper\n        #define _Included_com_zqy_opencvdemo_OpenCVHelper\n        #ifdef __cplusplus\n        extern \"C\" {\n        #endif\n        /*\n         + Class:     com_zqy_opencvdemo_OpenCVHelper\n         + Method:    gray\n         + Signature: ([III)[I\n         */\n        JNIEXPORT jintArray JNICALL Java_com_zqy_opencvdemo_OpenCVHelper_gray\n          (JNIEnv *, jclass, jintArray, jint, jint);\n\n        #ifdef __cplusplus\n        }\n        #endif\n        #endif\n\n* 新建cpp文件，实现对应的方法，就是灰度处理\n\n        #include \"com_zqy_opencvdemo_OpenCVHelper.h\"\n        #include <stdio.h>\n        #include <stdlib.h>\n        #include <opencv2/opencv.hpp>\n\n        using namespace cv;\n\n        extern \"C\" {\n\n        JNIEXPORT jintArray JNICALL Java_com_zqy_opencvdemo_OpenCVHelper_gray(\n                JNIEnv *env, jclass obj, jintArray buf, int w, int h);\n\n        JNIEXPORT jintArray JNICALL Java_com_zqy_opencvdemo_OpenCVHelper_gray(\n                JNIEnv *env, jclass obj, jintArray buf, int w, int h) {\n\n            jint *cbuf;\n            cbuf = env->GetIntArrayElements(buf, JNI_FALSE );\n            if (cbuf == NULL) {\n                return 0;\n            }\n\n            Mat imgData(h, w, CV_8UC4, (unsigned char *) cbuf);\n\n            uchar* ptr = imgData.ptr(0);\n            for(int i = 0; i < w*h; i ++){\n                //计算公式：Y(亮度) = 0.299*R + 0.587*G + 0.114*B\n                //对于一个int四字节，其彩色值存储方式为：BGRA\n                int grayScale = (int)(ptr[4*i+2]*0.299 + ptr[4*i+1]*0.587 + ptr[4*i+0]*0.114);\n                ptr[4*i+1] = grayScale;\n                ptr[4*i+2] = grayScale;\n                ptr[4*i+0] = grayScale;\n            }\n\n            int size = w * h;\n            jintArray result = env->NewIntArray(size);\n            env->SetIntArrayRegion(result, 0, size, cbuf);\n            env->ReleaseIntArrayElements(buf, cbuf, 0);\n            return result;\n        }\n        }\n\n* 之后，需要将cpp文件编译进去，在Andorid.mk文件中加入\n\n        LOCAL_SRC_FILES := com_zqy_opencvdemo_OpenCVHelper.cpp\n\n* 然后在java层写个测试方法测试一下是否进行灰度化了\n\n        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);\n        int w = bitmap.getWidth(), h = bitmap.getHeight();\n        int[] pix = new int[w * h];\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n        int[] resultPixes = OpenCVHelper.gray(pix, w, h);\n        Bitmap result = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565);\n        result.setPixels(resultPixes, 0, w, 0, 0, w, h);\n        imageView.setImageBitmap(result);\n\n#### 使用动态的OpenCV库的方式\n\n* 在第一种基础上，修改Android.mk文件,修改`OPENCV_LIB_TYPE := STATIC`为`OPENCV_LIB_TYPE := SHARED`。这时候再用ndkBuild一下，你会发现会输出一些警告以及一部分红色的内容。生成的so库的大小为310k，小了好几倍。这时候如果你直接运行程序，会报错误，原因是我们使用的是动态库加载方式，还需要将依赖的so加进去，这个so就是图中的`libopencv_java3.so`，它在我们的最开始加到项目里的native目录中，将它按需拷到我们的jniLibs目录中去，既然我们使用了动态链接库，那么我们同样也可以使用java层的接口，优点是java开发速度相对快一点。\n\n#### 同时使用Java的API又使用JNI的接口的方式，此时编译时一般使用的是动态链接OpenCV库的方式。\n\n* 在第一种基础上，我们需要将sdk目录中的java代码拷到项目中去，但是`org.opencv.engine`包中是一个`aidl`，我们需要将它剪贴到aidl目录中去，最后还有一个资源文件attrs.xml，copy过来,build一下项目，不出意外应该会报错，这时候找到该类，引入自己的R文件包就可以了,再次build应该就不会有什么问题了。\n\n* java层的测试方法\n\n        OpenCVLoader.initDebug();\n        Mat rgbMat = new Mat();\n        Mat grayMat = new Mat();\n        Bitmap srcBitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);\n        Bitmap grayBitmap = Bitmap.createBitmap(srcBitmap.getWidth(), srcBitmap.getHeight(), Bitmap.Config.RGB_565);\n        Utils.bitmapToMat(srcBitmap, rgbMat);//convert original bitmap to Mat, R G B.\n        Imgproc.cvtColor(rgbMat, grayMat, Imgproc.COLOR_RGB2GRAY);//rgbMat to gray grayMat\n        Utils.matToBitmap(grayMat, grayBitmap); //convert mat to bitmap\n        imageView.setImageBitmap(grayBitmap);\n\n　　注意使用`OpenCVLoader.initDebug();`进行初始化而不是使用`OpenCVLoader.initAsync()`。这种方法的特点是处理都在java层，不怎么会涉及jni层的代码，除非java层完成不了的工作会转移到jni层去。\n\n三种方法各有各的优点，根据自己的情况进行选择：\n\n* 如果c++特别好的，建议使用第一种方法\n* 如果更习惯java代码的，并且java层的函数都能进行处理的，建议选择第三种方法\n* 第二种方法建议在第三种方法不满足条件的情况下进行辅助使用，因为使用了第三种方法的前提是使用第二种方法的动态链接库。\n","slug":"Android-搭建OpenCV开发环境","published":1,"updated":"2016-05-10T01:56:06.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfv001420ml3lzd9ihf"},{"title":"Android_基础知识汇总","date":"2016-05-01T08:04:00.000Z","_content":"\n[Android 知识梳理](http://www.codemx.cn/2016/05/04/2016-05-04-Android-Tree/#more)\n\n\n","source":"_posts/Android-基础知识汇总.md","raw":"title: Android_基础知识汇总\ndate: 2016-5-1 16:04:00\ncategories: \n    - Android\ntags: \n    - Android \n    - 基础知识\n---\n\n[Android 知识梳理](http://www.codemx.cn/2016/05/04/2016-05-04-Android-Tree/#more)\n\n\n","slug":"Android-基础知识汇总","published":1,"updated":"2016-05-09T07:02:37.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfv001920ml9bhvd2gm"},{"title":"Audio Focus的应用","date":"2013-04-10T08:04:00.000Z","_content":"### Audio Focus的应用\n\n[android framework audiofocus机制](http://blog.sina.com.cn/s/blog_645b74b90101e74f.html)\n[Android音乐编程:管理音频焦点](http://mobile.51cto.com/android-309321.htm)\n[Android中的Audio播放：竞争Audio之Audio Focus的应用](http://www.linuxidc.com/Linux/2012-04/57902.htm)","source":"_posts/Android-关于AudioFocus.md","raw":"\ntitle: Audio Focus的应用\ndate: 2013-4-10 16:04:00\ncategories: \n    - Android\ntags: \n    - Android \n    - Audio Focus\n---\n### Audio Focus的应用\n\n[android framework audiofocus机制](http://blog.sina.com.cn/s/blog_645b74b90101e74f.html)\n[Android音乐编程:管理音频焦点](http://mobile.51cto.com/android-309321.htm)\n[Android中的Audio播放：竞争Audio之Audio Focus的应用](http://www.linuxidc.com/Linux/2012-04/57902.htm)","slug":"Android-关于AudioFocus","published":1,"updated":"2016-05-13T06:29:13.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfv001e20mldfthvait"},{"title":"Android-ffmpeg编译环境搭建","date":"2016-05-10T09:05:20.000Z","_content":"\n之前都是在Mac下编译ffmpeg，今天在网上搜索一番，尝试在window7下编译ffmpeg。\n\n<!-- more -->\n\n#### 步骤:\n\n1. 安装[Visual Studio 2015](https://www.visualstudio.com/)\n\n2. 下载配置[android NDK](http://developer.android.com/tools/sdk/ndk/index.html);\n\n3. 下载[ffmpeg](https://www.ffmpeg.org/)源码并解压;后面执行编译时可能会出现:`*** missing separator. Stop`,你可以先`git config --global core.autocrlf false`,然后重新`clone`.\n\n4. 下载[MinGW](http://www.mingw.org/)安装器;下载完成后安装，安装完成后点运行，标记上以下几项：\n   <div align=center>\n\t<img src=\"http://img.blog.csdn.net/20140827212847608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmluZXdpbmQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\">\n   </div>\n   然后在Installation菜单下点击Apply Changes（mingw32-gcc-g++不用选择；\n   \n5. 下载[yasm](http://yasm.tortall.net/);下载后改名为`yasm.exe`，复制到MinGW的`/msys/1.0/bin`目录下；\n\n6. 配置`MinGW/msys/1.0/msys.bat`文件，在此文件的最前面(@echo off之后)添加一行如下内容：\n\n        call \"D:\\Program Files(x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\vcvars32.bat\" //依实际安装路径修改路径\n        \n7. 重命名`MinGW/msys/1.0/bin/link.exe`为`link_renamed.exe`，这一步是防止这个link.exe与vc的link.exe发生冲突，编译完成后可修改回来；\n\n8. 在ffmpeg源码目录下新建一个`build_android.sh`脚本，并输入如下内容：\n\n        NDK=D:/android_develop/android-ndk-r10e\n        SYSROOT=$NDK/platforms/android-21/arch-arm/\n        TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64\n        CPU=arm\n        PREFIX=$(pwd)/android/$CPU \n        ADDI_CFLAGS=\"-marm\"\n\n        function build_one\n        {\n        ./configure \\\n            --prefix=$PREFIX \\\n            --enable-shared \\\n            --disable-static \\\n            --disable-doc \\\n            --disable-ffmpeg \\\n            --disable-ffplay \\\n            --disable-ffprobe \\\n            --disable-ffserver \\\n            --disable-avdevice \\\n            --disable-doc \\\n            --disable-symver \\\n            --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n            --target-os=linux \\\n            --arch=arm \\\n            --enable-cross-compile \\\n            --sysroot=$SYSROOT \\\n            --extra-cflags=\"-Os -fpic $ADDI_CFLAGS\" \\\n            --extra-ldflags=\"$ADDI_LDFLAGS\" \n        make clean\n        make\n        make install\n        }\n        build_one\n\n9. 双击`MinGW/msys/1.0/msys.bat`，进入类linux shell界面，然后跳转到ffmpeg源码目录下`cd E:/android/ffmpeg/`;先用`chmod +x build_android.sh`给`build_android.sh`增加执行权限,再输入`build_android.sh`,然后坐等ffmpeg编译完成.","source":"_posts/Android-ffmpeg编译环境搭建.md","raw":"title: Android-ffmpeg编译环境搭建\ndate: 2016-05-10 17:05:20\ncategories: \n    - Android\ntags: \n    - Android \n    - ffmpeg编译\n---\n\n之前都是在Mac下编译ffmpeg，今天在网上搜索一番，尝试在window7下编译ffmpeg。\n\n<!-- more -->\n\n#### 步骤:\n\n1. 安装[Visual Studio 2015](https://www.visualstudio.com/)\n\n2. 下载配置[android NDK](http://developer.android.com/tools/sdk/ndk/index.html);\n\n3. 下载[ffmpeg](https://www.ffmpeg.org/)源码并解压;后面执行编译时可能会出现:`*** missing separator. Stop`,你可以先`git config --global core.autocrlf false`,然后重新`clone`.\n\n4. 下载[MinGW](http://www.mingw.org/)安装器;下载完成后安装，安装完成后点运行，标记上以下几项：\n   <div align=center>\n\t<img src=\"http://img.blog.csdn.net/20140827212847608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmluZXdpbmQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\">\n   </div>\n   然后在Installation菜单下点击Apply Changes（mingw32-gcc-g++不用选择；\n   \n5. 下载[yasm](http://yasm.tortall.net/);下载后改名为`yasm.exe`，复制到MinGW的`/msys/1.0/bin`目录下；\n\n6. 配置`MinGW/msys/1.0/msys.bat`文件，在此文件的最前面(@echo off之后)添加一行如下内容：\n\n        call \"D:\\Program Files(x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\vcvars32.bat\" //依实际安装路径修改路径\n        \n7. 重命名`MinGW/msys/1.0/bin/link.exe`为`link_renamed.exe`，这一步是防止这个link.exe与vc的link.exe发生冲突，编译完成后可修改回来；\n\n8. 在ffmpeg源码目录下新建一个`build_android.sh`脚本，并输入如下内容：\n\n        NDK=D:/android_develop/android-ndk-r10e\n        SYSROOT=$NDK/platforms/android-21/arch-arm/\n        TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64\n        CPU=arm\n        PREFIX=$(pwd)/android/$CPU \n        ADDI_CFLAGS=\"-marm\"\n\n        function build_one\n        {\n        ./configure \\\n            --prefix=$PREFIX \\\n            --enable-shared \\\n            --disable-static \\\n            --disable-doc \\\n            --disable-ffmpeg \\\n            --disable-ffplay \\\n            --disable-ffprobe \\\n            --disable-ffserver \\\n            --disable-avdevice \\\n            --disable-doc \\\n            --disable-symver \\\n            --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n            --target-os=linux \\\n            --arch=arm \\\n            --enable-cross-compile \\\n            --sysroot=$SYSROOT \\\n            --extra-cflags=\"-Os -fpic $ADDI_CFLAGS\" \\\n            --extra-ldflags=\"$ADDI_LDFLAGS\" \n        make clean\n        make\n        make install\n        }\n        build_one\n\n9. 双击`MinGW/msys/1.0/msys.bat`，进入类linux shell界面，然后跳转到ffmpeg源码目录下`cd E:/android/ffmpeg/`;先用`chmod +x build_android.sh`给`build_android.sh`增加执行权限,再输入`build_android.sh`,然后坐等ffmpeg编译完成.","slug":"Android-ffmpeg编译环境搭建","published":1,"updated":"2016-05-13T06:24:18.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjfv001j20ml2bq2ny2f"},{"title":"Android_RenderScript介绍","date":"2016-05-09T03:23:30.000Z","_content":"\n[RenderScript的首页](http://developer.android.com/guide/topics/renderscript/index.html)\n\n[关于图形方面的知识](http://developer.android.com/guide/topics/renderscript/graphics.html)\n\n[关于计算方面的知识](http://developer.android.com/guide/topics/renderscript/compute.html)\n\n\n### 什么是RenderScript？\n\n　　RenderScript是Android平台上进行高性能密集型任务计算的框架。Renderscript主要面向并行计算，虽然它对计算密集型工作也是有益的。Renderscript在运行时将在设备上可用的处理器间平衡负载，比如多核CPU，GPU或者DSP，它让你专注于算法而不是平衡负载。RenderScript对图像处理，计算摄影学，计算机视觉方面的应用非常有用。\n<!-- more -->\n　　在开始学习Renderscript前，你应该理解两个主要概念：\n\n* 高性能的计算核心由支持C99协议的语言书写（也就是C语言。译者注）。\n* 一套Java API 用来管理RenderScript资源，并控制核心计算的执行。\n\n#### 写RenderScript内核\n---\n　　一个RenderScript内核一般写在[工程目录]/src/ 目录下的`.rs`文件中，每一个`. rs`文件成为一个脚本。每一个脚本包含一系列的内核、函数、变量。通常包含:\n\n* 一个编译声明RenderScript内核语言的版本(#pragma version(1))。目前可用值只有1。\n* 一个编译声明这个脚本对应的java类的包名(#pragma rs java_package_name(com.example.app))。注意你的`.rs`文件必须放在你的Application里面，不能放在library project里。\n* 一些可调用的函数。一个可调用的函数是一个单线程的RenderScript函数，你可以从Java代码中调用它并传递变量。它通常用在处理管道里初始化设置或者一系列较大的计算。\n* 一些全局变量。一个Renderscript全局变量等价于C语言中的一个全局变量。你可以从Java代码中访问，它们通常被用来向RenderScript内核传递参数。\n* 一些计算核心。一个计算核心是在Allocation里的Element间执行的平行函数。\n    一个简单的核心如下：\n\n        uchar4 __attribute__((kernel)) invert(uchar4 in, uint32_t x, uint32_t y) {\n          uchar4 out = in;\n          out.r = 255 - in.r;\n          out.g = 255 - in.g;\n          out.b = 255 - in.b;\n          return out;\n        }\n\n　　它在很多方面跟标准C函数一致。第一个值得注意的是`__attribute__((kernel))`, 这表明这个函数式RenderScript内核而不是可调用函数。第二个特性是`in`参数和它的类型，在RenderScript内核里第一个参数会根据传入内核平台的Allocation被自动填入。默认的，内核将在每一个Element执行一次时在整个Allocation中运行。第三个注意点是内核的返回类型，这个返回值将被自动的写入到输出Allocation的适当的位置。RenderScript会在运行时确保输入和输出的Allocation的Element类型互相匹配；如果不匹配，会抛出异常。\n\n　　一个核心可能有一个输入Allocation或一个输出Allocation。也可能有多个输入输出Allocation。如果需要多个输入输出Allocation，这些对象应该同`rs_allocations`脚本全局变量绑定，并且通过`rsGetElementAt_type()`或者`rsSetElementAt_type()` 在内核或可调用函数中访问。\n\n　　一个核心可以使用`x`、`y`和`z`参数来访问当前执行的坐标。这些参数是可选的，但是类型必须是`uint32_t`。\n\n* 可选的`init()`函数。`init()`函数是一个特殊的可调用函数，它在脚本初始化时执行。这样可以在脚本创建时自动进行一些计算。\n* 一些静态全局变量和函数。静态的全局变量与普通的全局变量不同的地方是它不能在Java代码中设定。静态函数是一个标准的C函数，可以在内核和脚本中的可调用方法中调用，但是不能被Java API访问。如果全局变量或者函数不需要在Java代码中使用，强烈建议声明成`static`。\n\n#### 设置浮点精度\n\n　　你可以在脚本里控制浮点数的精度。这样做在不要求使用IEEE 754-2008 标准（默认使用）时是很有用的。下面的编译指示可以设置不同的浮点精度：\n\n* `#pragma rs_fp_full` (不指定时默认的设置)：使用IEEE 754-2008 标准的精度。\n* `#pragma rs_fp_relaxed` 不严格的使用IEEE 754-2008 的标准，允许少量的精度误差。\n* `#pragma rs_fp_imprecise` 不需要严格的精度要求，允许`#pragma rs_fp_relaxed`下的所有情况，还包括：\n    - Operations resulting in -0.0 can return +0.0 instead.\n    - Operations on INF and NAN are undefined.\n\nMost applications can use `rs_fp_relaxed` without any side effects. This may be very beneficial on some architectures due to additional optimizations only available with relaxed precision (such as SIMD CPU instructions).\n\n#### 访问Renderscript API\n---\n　　在Android应用里使用RenderScript的API有两种方式\n* `android.renderscript` 这个包在运行Android3.0(API level 11)的设备上可用，这是原始的API，目前没有被更新。\n* `android.support.v8.renderscript` 这个包可以通过共享库在运行Android2.2(API level 8)或以上版本的设备上使用。\n强烈建议使用第二种方式，因为它包含了最新的更新，并且支持更多的设备。\n\n#### 使用RenderScript共享库API\n\n　　为了使用共享库的RenderScript API，你需要安装你的开发环境。你需要下面的SDK工具：\n* Android SDK Tools revision 22.2 or higher\n* Android SDK Build-tools revision 18.1.0 or higher\n\n使用RenderScript APIs：\n\n1. 安装需要的SDK和编译工具\n2. 在build.gradle中修改RenderScript的设置\n    - 打开当前模块的build.gradle文件.\n    - 对照下面代码添加RenderScript设置:\n    \n            android {\n                compileSdkVersion 23\n                buildToolsVersion \"23.0.3\"\n\n                defaultConfig {\n                    minSdkVersion 8\n                    targetSdkVersion 19\n\n                    renderscriptTargetApi 18\n                    renderscriptSupportModeEnabled true\n                }\n            }\n\n3. 在类中导入共享库的类\n\n\t    import android.support.v8.renderscript.*;\n\n\n#### 在Java代码中使用RenderScript\n---\n　　在Java代码中使用RenderScript依赖`android.renderscript`或`android.support.v8.renderscript`中的API。大部分程序遵循如下的使用方式：\n\n1. **初始化RenderScript context。**`RenderScript` context通过`create(Context)`创建，它能保证RenderScript能被使用，并且提供了一个对象来控制所有后面创建的RenderScript对象的生命周期。创建这个context可能是一个耗时的操作，因为可能要在硬件的不同位置创建资源;通常，一个程序同时只能有一个RenderScript context。\n\n2. **创建至少一个Allocation来传递给脚本。**一个`Allocation`是一个RenderScript的对象，它存储了固定数量的数据。脚本里的内核将Allocation对象作为输入和输出，内核可以在绑定脚本全局变量时通过`rsGetElementAt_type()`和`rsSetElementType_type()`来访问Allocation对象。Allocation对象可以通过数组从java代码传递给Renderscript代码，反之亦然。Allocation对象通常用`createTyped(RenderScript, Type)`或`createFromBitmap(RenderScript, Bitmap)`创建。\n\n3. **创建你所需的任何脚本。**有两种脚本可被创建：\n    * **ScriptC**：这是上面`写RenderScript内核`部分介绍的用户自定义脚本。RenderScript编译器会为每一个脚本创建一个java类，可以方便从java代码中访问脚本；这个类会被命名成ScriptC_filename。比如：如果上面的核心位于`inver.rs`中，并且一个RenderScript context已经被创建，在java代码中初始化脚本的代码如下：\n    \n            ScriptC_invert invert = new ScriptC_invert(mRenderScript);\n\n    * **ScriptIntrinsic**：这是嵌入在RenderScript内核中的通用操作，比如高斯模糊、卷积、图像混合。更多信息请参看 [ScriptInstrinsic](http://developer.android.com/intl/zh-cn/reference/android/renderscript/ScriptIntrinsic.html)。\n\n4. **填充Allocation中的数据。**除了`android.renderscript`创建的Allocation以外，一个空的Allocation将被创建，填充一个Allocation，请使用Allocation的`copy`方法。\n\n5. **设置必要的脚步全局变量。**全局变量可以使用`ScriptC_filename`里的`set_globalname`来设置。例如,要想设置一个叫`elements`的整形变量，使用java方法`set_elements(int)`。RenderScript对象也可以在核心中设置，例如，叫做`lookup`的`rs_allocation`变量可以通过`set_lookup(Allocation)`函数设置。\n\n6. **加载适当的核心。**使用ScriptC_filename中的forEach_kernelname()函数可以加载一个核心。加载过程是异步的，加载的顺序和启动的顺序是一致的。根据传入内核的参数的不同，这个函数会携带一个或两个Allocation。默认的，一个核心会在整个输入输出Allocation中执行；为了在一系列Allocation中执行，给forEach函数的最后一个参数传递恰当的`Script.LaunchOptions`。可调用函数可以使用`ScriptC_filename`中的`invoke_functionname`调用。\n\n7. **从Allocation对象中拷贝数据。**为了在java代码中访问Allocation中的数据，需要使用Allocation的copy方法拷贝到java缓冲区中。这些方法会必要的时候在异步内核和函数调用间做同步。\n\n8. **销毁RenderScript context。**可以使用`destroy()`方法销毁RenderScript context，或者允许RenderScript context对象被垃圾回收。这样使用这个context中的任何对象将抛出异常。\n\n----\n\n","source":"_posts/Android-RenderScript介绍.md","raw":"title: Android_RenderScript介绍\ndate: 2016-05-09 11:23:30\ncategories: \n    - Android\ntags: \n    - Android \n    - RenderScript\n---\n\n[RenderScript的首页](http://developer.android.com/guide/topics/renderscript/index.html)\n\n[关于图形方面的知识](http://developer.android.com/guide/topics/renderscript/graphics.html)\n\n[关于计算方面的知识](http://developer.android.com/guide/topics/renderscript/compute.html)\n\n\n### 什么是RenderScript？\n\n　　RenderScript是Android平台上进行高性能密集型任务计算的框架。Renderscript主要面向并行计算，虽然它对计算密集型工作也是有益的。Renderscript在运行时将在设备上可用的处理器间平衡负载，比如多核CPU，GPU或者DSP，它让你专注于算法而不是平衡负载。RenderScript对图像处理，计算摄影学，计算机视觉方面的应用非常有用。\n<!-- more -->\n　　在开始学习Renderscript前，你应该理解两个主要概念：\n\n* 高性能的计算核心由支持C99协议的语言书写（也就是C语言。译者注）。\n* 一套Java API 用来管理RenderScript资源，并控制核心计算的执行。\n\n#### 写RenderScript内核\n---\n　　一个RenderScript内核一般写在[工程目录]/src/ 目录下的`.rs`文件中，每一个`. rs`文件成为一个脚本。每一个脚本包含一系列的内核、函数、变量。通常包含:\n\n* 一个编译声明RenderScript内核语言的版本(#pragma version(1))。目前可用值只有1。\n* 一个编译声明这个脚本对应的java类的包名(#pragma rs java_package_name(com.example.app))。注意你的`.rs`文件必须放在你的Application里面，不能放在library project里。\n* 一些可调用的函数。一个可调用的函数是一个单线程的RenderScript函数，你可以从Java代码中调用它并传递变量。它通常用在处理管道里初始化设置或者一系列较大的计算。\n* 一些全局变量。一个Renderscript全局变量等价于C语言中的一个全局变量。你可以从Java代码中访问，它们通常被用来向RenderScript内核传递参数。\n* 一些计算核心。一个计算核心是在Allocation里的Element间执行的平行函数。\n    一个简单的核心如下：\n\n        uchar4 __attribute__((kernel)) invert(uchar4 in, uint32_t x, uint32_t y) {\n          uchar4 out = in;\n          out.r = 255 - in.r;\n          out.g = 255 - in.g;\n          out.b = 255 - in.b;\n          return out;\n        }\n\n　　它在很多方面跟标准C函数一致。第一个值得注意的是`__attribute__((kernel))`, 这表明这个函数式RenderScript内核而不是可调用函数。第二个特性是`in`参数和它的类型，在RenderScript内核里第一个参数会根据传入内核平台的Allocation被自动填入。默认的，内核将在每一个Element执行一次时在整个Allocation中运行。第三个注意点是内核的返回类型，这个返回值将被自动的写入到输出Allocation的适当的位置。RenderScript会在运行时确保输入和输出的Allocation的Element类型互相匹配；如果不匹配，会抛出异常。\n\n　　一个核心可能有一个输入Allocation或一个输出Allocation。也可能有多个输入输出Allocation。如果需要多个输入输出Allocation，这些对象应该同`rs_allocations`脚本全局变量绑定，并且通过`rsGetElementAt_type()`或者`rsSetElementAt_type()` 在内核或可调用函数中访问。\n\n　　一个核心可以使用`x`、`y`和`z`参数来访问当前执行的坐标。这些参数是可选的，但是类型必须是`uint32_t`。\n\n* 可选的`init()`函数。`init()`函数是一个特殊的可调用函数，它在脚本初始化时执行。这样可以在脚本创建时自动进行一些计算。\n* 一些静态全局变量和函数。静态的全局变量与普通的全局变量不同的地方是它不能在Java代码中设定。静态函数是一个标准的C函数，可以在内核和脚本中的可调用方法中调用，但是不能被Java API访问。如果全局变量或者函数不需要在Java代码中使用，强烈建议声明成`static`。\n\n#### 设置浮点精度\n\n　　你可以在脚本里控制浮点数的精度。这样做在不要求使用IEEE 754-2008 标准（默认使用）时是很有用的。下面的编译指示可以设置不同的浮点精度：\n\n* `#pragma rs_fp_full` (不指定时默认的设置)：使用IEEE 754-2008 标准的精度。\n* `#pragma rs_fp_relaxed` 不严格的使用IEEE 754-2008 的标准，允许少量的精度误差。\n* `#pragma rs_fp_imprecise` 不需要严格的精度要求，允许`#pragma rs_fp_relaxed`下的所有情况，还包括：\n    - Operations resulting in -0.0 can return +0.0 instead.\n    - Operations on INF and NAN are undefined.\n\nMost applications can use `rs_fp_relaxed` without any side effects. This may be very beneficial on some architectures due to additional optimizations only available with relaxed precision (such as SIMD CPU instructions).\n\n#### 访问Renderscript API\n---\n　　在Android应用里使用RenderScript的API有两种方式\n* `android.renderscript` 这个包在运行Android3.0(API level 11)的设备上可用，这是原始的API，目前没有被更新。\n* `android.support.v8.renderscript` 这个包可以通过共享库在运行Android2.2(API level 8)或以上版本的设备上使用。\n强烈建议使用第二种方式，因为它包含了最新的更新，并且支持更多的设备。\n\n#### 使用RenderScript共享库API\n\n　　为了使用共享库的RenderScript API，你需要安装你的开发环境。你需要下面的SDK工具：\n* Android SDK Tools revision 22.2 or higher\n* Android SDK Build-tools revision 18.1.0 or higher\n\n使用RenderScript APIs：\n\n1. 安装需要的SDK和编译工具\n2. 在build.gradle中修改RenderScript的设置\n    - 打开当前模块的build.gradle文件.\n    - 对照下面代码添加RenderScript设置:\n    \n            android {\n                compileSdkVersion 23\n                buildToolsVersion \"23.0.3\"\n\n                defaultConfig {\n                    minSdkVersion 8\n                    targetSdkVersion 19\n\n                    renderscriptTargetApi 18\n                    renderscriptSupportModeEnabled true\n                }\n            }\n\n3. 在类中导入共享库的类\n\n\t    import android.support.v8.renderscript.*;\n\n\n#### 在Java代码中使用RenderScript\n---\n　　在Java代码中使用RenderScript依赖`android.renderscript`或`android.support.v8.renderscript`中的API。大部分程序遵循如下的使用方式：\n\n1. **初始化RenderScript context。**`RenderScript` context通过`create(Context)`创建，它能保证RenderScript能被使用，并且提供了一个对象来控制所有后面创建的RenderScript对象的生命周期。创建这个context可能是一个耗时的操作，因为可能要在硬件的不同位置创建资源;通常，一个程序同时只能有一个RenderScript context。\n\n2. **创建至少一个Allocation来传递给脚本。**一个`Allocation`是一个RenderScript的对象，它存储了固定数量的数据。脚本里的内核将Allocation对象作为输入和输出，内核可以在绑定脚本全局变量时通过`rsGetElementAt_type()`和`rsSetElementType_type()`来访问Allocation对象。Allocation对象可以通过数组从java代码传递给Renderscript代码，反之亦然。Allocation对象通常用`createTyped(RenderScript, Type)`或`createFromBitmap(RenderScript, Bitmap)`创建。\n\n3. **创建你所需的任何脚本。**有两种脚本可被创建：\n    * **ScriptC**：这是上面`写RenderScript内核`部分介绍的用户自定义脚本。RenderScript编译器会为每一个脚本创建一个java类，可以方便从java代码中访问脚本；这个类会被命名成ScriptC_filename。比如：如果上面的核心位于`inver.rs`中，并且一个RenderScript context已经被创建，在java代码中初始化脚本的代码如下：\n    \n            ScriptC_invert invert = new ScriptC_invert(mRenderScript);\n\n    * **ScriptIntrinsic**：这是嵌入在RenderScript内核中的通用操作，比如高斯模糊、卷积、图像混合。更多信息请参看 [ScriptInstrinsic](http://developer.android.com/intl/zh-cn/reference/android/renderscript/ScriptIntrinsic.html)。\n\n4. **填充Allocation中的数据。**除了`android.renderscript`创建的Allocation以外，一个空的Allocation将被创建，填充一个Allocation，请使用Allocation的`copy`方法。\n\n5. **设置必要的脚步全局变量。**全局变量可以使用`ScriptC_filename`里的`set_globalname`来设置。例如,要想设置一个叫`elements`的整形变量，使用java方法`set_elements(int)`。RenderScript对象也可以在核心中设置，例如，叫做`lookup`的`rs_allocation`变量可以通过`set_lookup(Allocation)`函数设置。\n\n6. **加载适当的核心。**使用ScriptC_filename中的forEach_kernelname()函数可以加载一个核心。加载过程是异步的，加载的顺序和启动的顺序是一致的。根据传入内核的参数的不同，这个函数会携带一个或两个Allocation。默认的，一个核心会在整个输入输出Allocation中执行；为了在一系列Allocation中执行，给forEach函数的最后一个参数传递恰当的`Script.LaunchOptions`。可调用函数可以使用`ScriptC_filename`中的`invoke_functionname`调用。\n\n7. **从Allocation对象中拷贝数据。**为了在java代码中访问Allocation中的数据，需要使用Allocation的copy方法拷贝到java缓冲区中。这些方法会必要的时候在异步内核和函数调用间做同步。\n\n8. **销毁RenderScript context。**可以使用`destroy()`方法销毁RenderScript context，或者允许RenderScript context对象被垃圾回收。这样使用这个context中的任何对象将抛出异常。\n\n----\n\n","slug":"Android-RenderScript介绍","published":1,"updated":"2016-05-09T07:25:33.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjgb001o20ml9d4y6eqo"},{"title":"Android_MediaPlayer状态机","date":"2012-04-03T10:08:20.000Z","_content":"\n　　MediaPlayer类可用于控制音频/视频文件或流的播放。\n\n　　对播放音频/视频文件和流的控制是通过一个状态机来管理的。下图显示一个MediaPlayer对象被支持的播放控制操作驱动的生命周期和状态。椭圆代表MediaPlayer对象可能驻留的状态。弧线表示驱动MediaPlayer在各个状态之间迁移的播放控制操作。这里有两种类型的弧线。由一个箭头开始的弧代表同步的方法调用，而以双箭头开头的代表的弧线代表异步方法调用。\n<!-- more -->\n<div align=center>\n\t<img src=\"http://hi.csdn.net/attachment/201202/21/0_1329790492uzEt.gif\">\n</div>\n\n　　通过这张图，我们可以知道一个MediaPlayer对象有以下的状态：\n\n1. 当一个MediaPlayer对象被刚刚用new操作符创建或是调用了reset()方法后，它就处于Idle状态。当调用了release()方法后，它就处于End状态。这两种状态之间是MediaPlayer对象的生命周期。\n\n\t　　在一个新构建的MediaPlayer对象和一个调用了reset()方法的MediaPlayer对象之间有一个微小的但是十分重要的差别。在处于Idle状态时，调用getCurrentPosition(), getDuration(), getVideoHeight(), getVideoWidth(), setAudioStreamType(int), setLooping(boolean), setVolume(float, float), pause(), start(), stop(), seekTo(int), prepare() 或者 prepareAsync() 方法都是编程错误。当一个MediaPlayer对象刚被构建的时候，内部的播放引擎和对象的状态都没有改变，在这个时候调用以上的那些方法，框架将无法回调客户端程序注册的OnErrorListener.onError()方法；但若这个MediaPlayer对象调用了reset()方法之后，再调用以上的那些方法，内部的播放引擎就会回调客户端程序注册的OnErrorListener.onError()方法了，并将错误的状态传入。\n\n\t　　我们建议，一旦一个MediaPlayer对象不再被使用，应立即调用release()方法来释放在内部的播放引擎中与这个MediaPlayer对象关联的资源。资源可能包括如硬件加速组件的单态组件，若没有调用release()方法可能会导致之后的MediaPlayer对象实例无法使用这种单态硬件资源，从而退回到软件实现或运行失败。一旦MediaPlayer对象进入了End状态，它不能再被使用，也没有办法再迁移到其它状态。\n\n\t　　此外，使用new操作符创建的MediaPlayer对象处于Idle状态，而那些通过重载的create()便利方法创建的MediaPlayer对象却不是处于Idle状态。事实上，如果成功调用了重载的create()方法，那么这些对象已经是Prepare状态了。 \n\n2. 在一般情况下，由于种种原因一些播放控制操作可能会失败，如不支持的音频/视频格式，缺少隔行扫描的音频/视频，分辨率太高，流超时等原因，等等。因此，错误报告和恢复在这种情况下是非常重要的。有时，由于编程错误，在处于无效状态的情况下调用了一个播放控制操作可能发生。在所有这些错误条件下，内部的播放引擎会调用一个由客户端程序员提供的OnErrorListener.onError()方法。客户端程序员可以通过调用MediaPlayer.setOnErrorListener（Android.media.MediaPlayer.OnErrorListener）方法来注册OnErrorListener.\n\n\t　　一旦发生错误，MediaPlayer对象会进入到Error状态。\n\n\t　　为了重用一个处于Error状态的MediaPlayer对象，可以调用reset()方法来把这个对象恢复成Idle状态。\n\n\t　　注册一个OnErrorListener来获知内部播放引擎发生的错误是好的编程习惯。\n\n\t　　在不合法的状态下调用一些方法，如prepare()，prepareAsync()和setDataSource()方法会抛出IllegalStateException异常。 \n\n3. 调用setDataSource(FileDescriptor)方法，或setDataSource(String)方法，或setDataSource(Context，Uri)方法，或setDataSource(FileDescriptor，long，long)方法会使处于Idle状态的对象迁移到Initialized状态。\n\n\t　　若当此MediaPlayer处于其它的状态下，调用setDataSource()方法，会抛出IllegalStateException异常。\n\n\t　　好的编程习惯是不要疏忽了调用setDataSource()方法的时候可能会抛出的IllegalArgumentException异常和IOException异常。 \n\n4. 在开始播放之前，MediaPlayer对象必须要进入Prepared状态。\n\n\t　　有两种方法（同步和异步）可以使MediaPlayer对象进入Prepared状态：要么调用prepare()方法（同步），此方法返回就表示该MediaPlayer对象已经进入了Prepared状态；要么调用prepareAsync()方法（异步），此方法会使此MediaPlayer对象进入Preparing状态并返回，而内部的播放引擎会继续未完成的准备工作。当同步版本返回时或异步版本的准备工作完全完成时就会调用客户端程序员提供的OnPreparedListener.onPrepared()监听方法。可以调用MediaPlayer.setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)方法来注册OnPreparedListener.\n\n\t　　Preparing是一个中间状态，在此状态下调用任何具备边影响的方法的结果都是未知的！\n\n\t　　在不合适的状态下调用prepare()和prepareAsync()方法会抛出IllegalStateException异常。当MediaPlayer对象处于Prepared状态的时候，可以调整音频/视频的属性，如音量，播放时是否一直亮屏，循环播放等。 \n\n5. 要开始播放，必须调用start()方法。当此方法成功返回时，MediaPlayer的对象处于Started状态。isPlaying()方法可以被调用来测试某个MediaPlayer对象是否在Started状态。\n\n\t　　当处于Started状态时，内部播放引擎会调用客户端程序员提供的OnBufferingUpdateListener.onBufferingUpdate()回调方法，此回调方法允许应用程序追踪流播放的缓冲的状态。\n\n\t　　对一个已经处于Started 状态的MediaPlayer对象调用start()方法没有影响。\n\n6. 播放可以被暂停，停止，以及调整当前播放位置。当调用pause()方法并返回时，会使MediaPlayer对象进入Paused状态。注意Started与Paused状态的相互转换在内部的播放引擎中是异步的。所以可能需要一点时间在isPlaying()方法中更新状态，若在播放流内容，这段时间可能会有几秒钟。\n\n\t　　调用start()方法会让一个处于Paused状态的MediaPlayer对象从之前暂停的地方恢复播放。当调用start()方法返回的时候，MediaPlayer对象的状态会又变成Started状态。\n\n\t　　对一个已经处于Paused状态的MediaPlayer对象pause()方法没有影响。\n\n7. 调用stop()方法会停止播放，并且还会让一个处于Started，Paused，Prepared或PlaybackCompleted状态的MediaPlayer进入Stopped状态。\n\n\t　　对一个已经处于Stopped状态的MediaPlayer对象stop()方法没有影响。\n\n8. 调用seekTo()方法可以调整播放的位置。\n\n\t　　seekTo(int)方法是异步执行的，所以它可以马上返回，但是实际的定位播放操作可能需要一段时间才能完成，尤其是播放流形式的音频/视频。当实际的定位播放操作完成之后，内部的播放引擎会调用客户端程序员提供的OnSeekComplete.onSeekComplete()回调方法。可以通过setOnSeekCompleteListener(OnSeekCompleteListener)方法注册。\n\n\t　　注意，seekTo(int)方法也可以在其它状态下调用，比如Prepared，Paused和PlaybackCompleted状态。此外，目前的播放位置，实际可以调用getCurrentPosition()方法得到，它可以帮助如音乐播放器的应用程序不断更新播放进度\n\n9. 当播放到流的末尾，播放就完成了。\n\n\t　　如果调用了setLooping(boolean)方法开启了循环模式，那么这个MediaPlayer对象会重新进入Started状态。\n\n\t　　若没有开启循环模式，那么内部的播放引擎会调用客户端程序员提供的OnCompletion.onCompletion()回调方法。可以通过调用MediaPlayer.setOnCompletionListener(OnCompletionListener)方法来设置。内部的播放引擎一旦调用了OnCompletion.onCompletion()回调方法，说明这个MediaPlayer对象进入了PlaybackCompleted状态。\n\n\t　　当处于PlaybackCompleted状态的时候，可以再调用start()方法来让这个MediaPlayer对象再进入Started状态。","source":"_posts/Android-MediaPlayer状态机.md","raw":"title: Android_MediaPlayer状态机\ndate: 2012-4-3 18:08:20\ncategories: \n    - Android\n    - MediaPlayer\ntags: \n    - Android \n    - MediaPlayer\n    - 状态机\n---\n\n　　MediaPlayer类可用于控制音频/视频文件或流的播放。\n\n　　对播放音频/视频文件和流的控制是通过一个状态机来管理的。下图显示一个MediaPlayer对象被支持的播放控制操作驱动的生命周期和状态。椭圆代表MediaPlayer对象可能驻留的状态。弧线表示驱动MediaPlayer在各个状态之间迁移的播放控制操作。这里有两种类型的弧线。由一个箭头开始的弧代表同步的方法调用，而以双箭头开头的代表的弧线代表异步方法调用。\n<!-- more -->\n<div align=center>\n\t<img src=\"http://hi.csdn.net/attachment/201202/21/0_1329790492uzEt.gif\">\n</div>\n\n　　通过这张图，我们可以知道一个MediaPlayer对象有以下的状态：\n\n1. 当一个MediaPlayer对象被刚刚用new操作符创建或是调用了reset()方法后，它就处于Idle状态。当调用了release()方法后，它就处于End状态。这两种状态之间是MediaPlayer对象的生命周期。\n\n\t　　在一个新构建的MediaPlayer对象和一个调用了reset()方法的MediaPlayer对象之间有一个微小的但是十分重要的差别。在处于Idle状态时，调用getCurrentPosition(), getDuration(), getVideoHeight(), getVideoWidth(), setAudioStreamType(int), setLooping(boolean), setVolume(float, float), pause(), start(), stop(), seekTo(int), prepare() 或者 prepareAsync() 方法都是编程错误。当一个MediaPlayer对象刚被构建的时候，内部的播放引擎和对象的状态都没有改变，在这个时候调用以上的那些方法，框架将无法回调客户端程序注册的OnErrorListener.onError()方法；但若这个MediaPlayer对象调用了reset()方法之后，再调用以上的那些方法，内部的播放引擎就会回调客户端程序注册的OnErrorListener.onError()方法了，并将错误的状态传入。\n\n\t　　我们建议，一旦一个MediaPlayer对象不再被使用，应立即调用release()方法来释放在内部的播放引擎中与这个MediaPlayer对象关联的资源。资源可能包括如硬件加速组件的单态组件，若没有调用release()方法可能会导致之后的MediaPlayer对象实例无法使用这种单态硬件资源，从而退回到软件实现或运行失败。一旦MediaPlayer对象进入了End状态，它不能再被使用，也没有办法再迁移到其它状态。\n\n\t　　此外，使用new操作符创建的MediaPlayer对象处于Idle状态，而那些通过重载的create()便利方法创建的MediaPlayer对象却不是处于Idle状态。事实上，如果成功调用了重载的create()方法，那么这些对象已经是Prepare状态了。 \n\n2. 在一般情况下，由于种种原因一些播放控制操作可能会失败，如不支持的音频/视频格式，缺少隔行扫描的音频/视频，分辨率太高，流超时等原因，等等。因此，错误报告和恢复在这种情况下是非常重要的。有时，由于编程错误，在处于无效状态的情况下调用了一个播放控制操作可能发生。在所有这些错误条件下，内部的播放引擎会调用一个由客户端程序员提供的OnErrorListener.onError()方法。客户端程序员可以通过调用MediaPlayer.setOnErrorListener（Android.media.MediaPlayer.OnErrorListener）方法来注册OnErrorListener.\n\n\t　　一旦发生错误，MediaPlayer对象会进入到Error状态。\n\n\t　　为了重用一个处于Error状态的MediaPlayer对象，可以调用reset()方法来把这个对象恢复成Idle状态。\n\n\t　　注册一个OnErrorListener来获知内部播放引擎发生的错误是好的编程习惯。\n\n\t　　在不合法的状态下调用一些方法，如prepare()，prepareAsync()和setDataSource()方法会抛出IllegalStateException异常。 \n\n3. 调用setDataSource(FileDescriptor)方法，或setDataSource(String)方法，或setDataSource(Context，Uri)方法，或setDataSource(FileDescriptor，long，long)方法会使处于Idle状态的对象迁移到Initialized状态。\n\n\t　　若当此MediaPlayer处于其它的状态下，调用setDataSource()方法，会抛出IllegalStateException异常。\n\n\t　　好的编程习惯是不要疏忽了调用setDataSource()方法的时候可能会抛出的IllegalArgumentException异常和IOException异常。 \n\n4. 在开始播放之前，MediaPlayer对象必须要进入Prepared状态。\n\n\t　　有两种方法（同步和异步）可以使MediaPlayer对象进入Prepared状态：要么调用prepare()方法（同步），此方法返回就表示该MediaPlayer对象已经进入了Prepared状态；要么调用prepareAsync()方法（异步），此方法会使此MediaPlayer对象进入Preparing状态并返回，而内部的播放引擎会继续未完成的准备工作。当同步版本返回时或异步版本的准备工作完全完成时就会调用客户端程序员提供的OnPreparedListener.onPrepared()监听方法。可以调用MediaPlayer.setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)方法来注册OnPreparedListener.\n\n\t　　Preparing是一个中间状态，在此状态下调用任何具备边影响的方法的结果都是未知的！\n\n\t　　在不合适的状态下调用prepare()和prepareAsync()方法会抛出IllegalStateException异常。当MediaPlayer对象处于Prepared状态的时候，可以调整音频/视频的属性，如音量，播放时是否一直亮屏，循环播放等。 \n\n5. 要开始播放，必须调用start()方法。当此方法成功返回时，MediaPlayer的对象处于Started状态。isPlaying()方法可以被调用来测试某个MediaPlayer对象是否在Started状态。\n\n\t　　当处于Started状态时，内部播放引擎会调用客户端程序员提供的OnBufferingUpdateListener.onBufferingUpdate()回调方法，此回调方法允许应用程序追踪流播放的缓冲的状态。\n\n\t　　对一个已经处于Started 状态的MediaPlayer对象调用start()方法没有影响。\n\n6. 播放可以被暂停，停止，以及调整当前播放位置。当调用pause()方法并返回时，会使MediaPlayer对象进入Paused状态。注意Started与Paused状态的相互转换在内部的播放引擎中是异步的。所以可能需要一点时间在isPlaying()方法中更新状态，若在播放流内容，这段时间可能会有几秒钟。\n\n\t　　调用start()方法会让一个处于Paused状态的MediaPlayer对象从之前暂停的地方恢复播放。当调用start()方法返回的时候，MediaPlayer对象的状态会又变成Started状态。\n\n\t　　对一个已经处于Paused状态的MediaPlayer对象pause()方法没有影响。\n\n7. 调用stop()方法会停止播放，并且还会让一个处于Started，Paused，Prepared或PlaybackCompleted状态的MediaPlayer进入Stopped状态。\n\n\t　　对一个已经处于Stopped状态的MediaPlayer对象stop()方法没有影响。\n\n8. 调用seekTo()方法可以调整播放的位置。\n\n\t　　seekTo(int)方法是异步执行的，所以它可以马上返回，但是实际的定位播放操作可能需要一段时间才能完成，尤其是播放流形式的音频/视频。当实际的定位播放操作完成之后，内部的播放引擎会调用客户端程序员提供的OnSeekComplete.onSeekComplete()回调方法。可以通过setOnSeekCompleteListener(OnSeekCompleteListener)方法注册。\n\n\t　　注意，seekTo(int)方法也可以在其它状态下调用，比如Prepared，Paused和PlaybackCompleted状态。此外，目前的播放位置，实际可以调用getCurrentPosition()方法得到，它可以帮助如音乐播放器的应用程序不断更新播放进度\n\n9. 当播放到流的末尾，播放就完成了。\n\n\t　　如果调用了setLooping(boolean)方法开启了循环模式，那么这个MediaPlayer对象会重新进入Started状态。\n\n\t　　若没有开启循环模式，那么内部的播放引擎会调用客户端程序员提供的OnCompletion.onCompletion()回调方法。可以通过调用MediaPlayer.setOnCompletionListener(OnCompletionListener)方法来设置。内部的播放引擎一旦调用了OnCompletion.onCompletion()回调方法，说明这个MediaPlayer对象进入了PlaybackCompleted状态。\n\n\t　　当处于PlaybackCompleted状态的时候，可以再调用start()方法来让这个MediaPlayer对象再进入Started状态。","slug":"Android-MediaPlayer状态机","published":1,"updated":"2016-05-09T07:06:35.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjgb001s20mlm3tpk9cl"},{"title":"Android_Camera实时滤镜(1)","date":"2016-05-01T08:04:00.000Z","_content":"\n本文参考[Android图像处理之实时滤镜](http://blog.csdn.net/column/details/androidrealfilter.html)\n\n相关知识：\n[android-gpuimage](https://github.com/CyberAgent/android-gpuimage)/\n[OpenGL](http://blog.csdn.net/myarrow/article/details/7692044)\n\n　　目前Android平台优质的预览数据实时处理开源代码不多，例如android-gpuimage，采用将YUV数据在NDK层转化为RGB数据，由OpenGL渲染到屏幕中，滤镜算法由Shader实现。其他方面，经过研究，目前主要有以下思路实现：\n<!-- more -->\n1. 不转换，直接由OpenGL绘制，采用Shader实现图像处理（因处理算法和渲染图片大部分采用RGB格式，此方案暂不考虑，仅提出可能性）；\n2. 通过C/C++实现YUV->RGB和图像处理，合成Bitmap，由CPU绘制在Canvas上；\n3. 通过C/C++实现YUV->RGB和图像处理，在NDK层直接绘制在SurfaceView上；\n4. 通过C/C++实现YUV->RGB，采用Shader实现图像处理，采用OpenGL绘制（android-gpuimage）；\n5. 通过Shader实现YUV->RGB和图像处理，采用OpenGL绘制。（最终采用方案）\n\n　　由于方案1暂不考虑，首先从方案2探讨，Android平台的Camera使用很多博客说过了，直接跳过，在`onPreviewFrame(byte[] data, Camera camera)`中，我们可以获得相机预览，格式为YUV格式，通过C++方案转换成RGB，通过BitmapFactory合成Bitmap，通过`getHolder().lockCanvas()`获得canvas，再通过`canvas.drawBitmap`将bitmap绘制在屏幕当中。\n\n　　通过BitmapFactory创建bitmap是一个很耗时的过程，如果每一帧都创建一个bitmap，将出现严重卡顿，所以我们只需要创建一个Bitmap，将该Bitmap传递给C++层，通过JNI操作Bitmap的像素数据，即通过AndroidBitmap_lockPixels获得指针，将YUV数据转换后填充到该指针中（具体转换算法见android-gpuimage）来修改该Bitmap，避免了Bitmap的创建，经过华为Mate7试验，ARGB_8888格式1280X720大小的Bitmap每次绘制耗时6ms左右，每帧间隔50ms~60ms左右，若将图像处理算法控制在40ms~50ms内（例如YUV转换RGB算法），该方案基本可行。\n\n　　另外，可以通过方案2的思路，放弃创建Bitmap，将SurfaceView格式设置为RGB，通过JNI操作Surface，直接将数据显示在SurfaceView中，该方案仅理论思考，由于上述6ms基本达到理论要求，因此方案2并未实践验证，若有错误或者验证的同学，欢迎交流。\n\n关键代码示例：\n\n    jbyte* yuv = (jbyte*) (*env)->GetPrimitiveArrayCritical(env, yuv420sp, 0);//获取Java层传递的YUV  \n      \n    int* rgbData = NULL;//Bitmap像素数据  \n    if(AndroidBitmap_lockPixels(env,bitmap,(void**)&rgbData))  \n        return -1;  \n    for(j = 0; j < h; j++) {//YUV转RGB算法，在此添加自己的图像处理  \n        pixPtr = j * w;  \n        jDiv2 = j >> 1;  \n        for(i = 0; i < w; i++) {  \n            Y = yuv[pixPtr];  \n            if(Y < 0) \n                Y += 255;  \n            if((i & 0x1) != 1) {  \n                cOff = sz + jDiv2 * w + (i >> 1) * 2;  \n                Cb = yuv[cOff];  \n                if(Cb < 0) Cb += 127; else Cb -= 128;  \n                Cr = yuv[cOff + 1];  \n                if(Cr < 0) Cr += 127; else Cr -= 128;  \n            }  \n            Y = Y + (Y >> 3) + (Y >> 5) + (Y >> 7);  \n            R = Y + (Cr << 1) + (Cr >> 6);  \n            if(R < 0) \n                R = 0; \n            else if(R > 255) \n                R = 255;  \n            G = Y - Cb + (Cb >> 3) + (Cb >> 4) - (Cr >> 1) + (Cr >> 3);  \n            if(G < 0) \n                G = 0; \n            else if(G > 255)\n                G = 255;  \n            B = Y + Cb + (Cb >> 1) + (Cb >> 4) + (Cb >> 5);  \n            if(B < 0) \n                B = 0;\n            else if(B > 255) \n                B = 255;  \n            rgbData[pixPtr++] = 0xff000000 + (R << 16) + (G << 8) + B;//填充Bitmap  \n        }  \n    }  \n    AndroidBitmap_unlockPixels(env,bitmap);//释放锁  \n    (*env)->ReleasePrimitiveArrayCritical(env, yuv420sp, yuv, 0); \n\n　　现在介绍Android-gpuimage实现方式，即通过在C++层实现YUV-RGB转换，通过OpenGL绘制，通过片段着色器运行Shader脚本实现图像处理，虽然将滤镜的一些处理交给GPU来执行，极大的减少了速度，但YUV-RGB过程却拖了后腿。下面将从YUV、GLSL与OpenGL开始，逐步探讨方案5。\n\n> OpenGL着色语言（OpenGL Shading Language）是用来在OpenGL中着色编程的语言，也即开发人员写的短小的自定义程序，他们是在图形卡的GPU （Graphic Processor Unit图形处理单元）上执行的，代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程型。比如：视图转换、投影转换等。GLSL（GL Shading Language）的着色器代码分成2个部分：Vertex Shader（顶点着色器）和Fragment（片断着色器），有时还会有Geometry Shader（几何着色器）。负责运行顶点着色的是顶点着色器。它可以得到当前OpenGL 中的状态，GLSL内置变量进行传递。GLSL其使用C语言作为基础高阶着色语言，避免了使用汇编语言或硬件规格语言的复杂性。\n\n> 顶点着色器是一个可编程单元，执行顶点变换、纹理坐标变换、光照、材质等顶点的相关操作，每顶点执行一次。顶点着色器定义了在 2D 或者 3D 场景中几何图形是如何处理的。一个顶点指的是 2D 或者 3D 空间中的一个点。在图像处理中，有 4 个顶点：每一个顶点代表图像的一个角。顶点着色器设置顶点的位置，并且把位置和纹理坐标这样的参数发送到片段着色器。\n\n下面是GPUImage中一个顶点着色器：\n\n    attribute vec4 position;    \n    attribute vec4 inputTextureCoordinate；  \n      \n    varying vec2 textureCoordinate;  \n      \n    void main()    \n    {  \n        gl_position = position;  \n        textureCoordinate = inputTextureCoordinate.xy;  \n    }  \n\n　　attribute是只能在顶点着色器中使用的变量，来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标，顶点颜色等。\n　　varying变量是vertex和fragment shader之间做数据传递用的。一般vertex 　　shader修改varying变量的值，然后fragment 　　shader使用该varying变量的值。因此varying变量在vertex和fragment 　　shader二者之间的声明必须是一致的。\n\nattribute vec4 position;\n　　position变量是我们在程序中传给Shader的顶点数据的位置，是一个矩阵，规定了图像4个点的位置，并且可以在shader中经过矩阵进行平移、旋转等再次变换。在GPUImage中，我们根据GLSurfaceView的大小、PreviewSize的大小实现计算出矩阵，通过glGetAttribLocation获取id，再通过glVertexAttribPointer将矩阵传入。新的顶点位置通过在顶点着色器中写入gl_Position传递到渲染管线的后继阶段继续处理。结合后面绘制过程中的glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);，首先选取第三个点，与前两个点绘制成一个三角形，再选取最后一个点，与第二、第三个点绘制成三角形，最终绘制成多边形区域。\n\nattribute vec2 inputTextureCoordinate；\n　　inputTextureCoordinate是纹理坐标，纹理坐标定义了图像的哪一部分将被映射到多边形。如图所示，下图是OpenGL纹理坐标系统，左下角为原点。\n\n<div align=center>\n    <img src=\"http://img.blog.csdn.net/20151126123806218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\">\n</div>\n\n　　传入此坐标，代表输出图像不会经过变换，在GPUImage中，因为输出图像与应用方向关系，需要将图像旋转90度，即坐标为\n\n    public static final float TEXTURE_ROTATED_90[] = {  \n        1.0f, 1.0f,  \n        1.0f, 0.0f,  \n        0.0f, 1.0f,  \n        0.0f, 0.0f,  \n    }; \n\nvarying vec2 textureCoordinate\n　　因为顶点着色器负责和片段着色器交流，所以我们需要创建一个变量和它共享相关的信息。在图像处理中，片段着色器需要的唯一相关信息就是顶点着色器现在正在处理哪个像素。\n\ngl_Position = position;\n　　gl_Position是用来传输投影坐标系内顶点坐标的内建变量，GPUImage在Java层已经变换过，在这里不需要经过任何变换。\n\ntextureCoordinate = inputTextureCoordinate.xy;\n　　取出这个顶点中纹理坐标的 X 和 Y 的位置（仅需要这两个属性），然后赋值给一个将要和片段着色器通信的变量。到此，顶点着色器建立完毕。\n片段着色器：\n\n    varying highp vec2 textureCoordinate;  \n      \n    uniform sampler2D inputImageTexture;  \n      \n    void main()    \n    {  \n        gl_FragColor = texture2D(inputImageTexture, textureCoordinate);  \n    }  \n\n　　片段着色器和顶点着色器会成对出现。片段着色器扮演着显示的角色。我们的滤镜处理大部分都在片段着色器中进行。上段代码是一个无滤镜效果的片段着色器。\n\nvarying highp vec2 textureCoordinate;\n　　对应顶点着色器中变量名相同的变量，片段着色器作用在每一个像素上，我们需要一个方法来确定我们当前在分析哪一个像素/片段。它需要存储像素的 X 和 Y 坐标。我们接收到的是当前在顶点着色器被设置好的纹理坐标。\n\nuniform sampler2D inputImageTexture;\n　　uniforms变量(一致变量)用来将数据值从应用程其序传递到顶点着色器或者片元着色器。该变量有点类似C语言中的常量（const），即该变量的值不能被shader程序修改。sampler2D对应2D纹理，在GPUImage中，与onPreviewFrame中经过变换过的RGB数据绑定。GPU将从该纹理中取出点进行处理。\n\ngl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n　　这是我们碰到的第一个 GLSL 特有的方法：texture2D，顾名思义，创建一个 2D 的纹理。它采用我们之前声明过的属性作为参数来决定被处理的像素的颜色。这个颜色然后被设置给另外一个内建变量，gl_FragColor。因为片段着色器的唯一目的就是确定一个像素的颜色，gl_FragColor 本质上就是我们片段着色器的返回语句。一旦这个片段的颜色被设置，接下来片段着色器就不需要再做其他任何事情了，所以你在这之后写任何的语句，都不会被执行。\n\n到此为止，我们的Shader就写完了。\n\n在实际程序例如GPUImage中，操作顺序如下\n\n1. 创建shader\n    1）编写Vertex Shader和Fragment Shader源码。      \n    2）创建两个shader 实例：GLuint glCreateShader(GLenum type);        \n    3）给Shader实例指定源码。glShaderSource        \n    4）在线编译shaer源码 void glCompileShader(GLuint shader)\n\n        public static int loadShader(final String strSource, final int iType) {  \n            int[] compiled = new int[1];  \n            int iShader = GLES20.glCreateShader(iType);  \n            GLES20.glShaderSource(iShader, strSource);  \n            GLES20.glCompileShader(iShader);  \n            GLES20.glGetShaderiv(iShader, GLES20.GL_COMPILE_STATUS, compiled, 0);  \n            if (compiled[0] == 0) {  \n                Log.d(\"Load Shader Failed\", \"Compilation\\n\" + GLES20.glGetShaderInfoLog(iShader));  \n                return 0;  \n            }  \n            return iShader;  \n        }  \n\n2. 创建program\n    　　在OpenGL ES中，每个program对象有且仅有一个Vertex Shader对象和一个Fragment Shader对象连接到它。Shader类似于C编译器。Program类似于C链接器。glLinkProgram操作产生最后的可执行程序，它包含最后可以在硬件上执行的硬件指令。\n\n    1）创建program ：GLuint glCreateProgram(void)       \n    2）绑定shader到program ：void glAttachShader(GLuint program, GLuint shader)。每个program必须绑定一个Vertex Shader 和一个Fragment Shader。       \n    3）链接program ：void glLinkProgram(GLuint program)        \n    4）使用porgram ：void glUseProgram(GLuint program)\n\n        public static int loadProgram(final String strVSource, final String strFSource) {  \n            int iVShader;  \n            int iFShader;  \n            int iProgId;  \n            int[] link = new int[1];  \n            iVShader = loadShader(strVSource, GLES20.GL_VERTEX_SHADER);  \n            if (iVShader == 0) {  \n                Log.d(\"Load Program\", \"Vertex Shader Failed\");  \n                return 0;  \n            }  \n            iFShader = loadShader(strFSource, GLES20.GL_FRAGMENT_SHADER);  \n            if (iFShader == 0) {  \n                Log.d(\"Load Program\", \"Fragment Shader Failed\");  \n                return 0;  \n            }  \n          \n            iProgId = GLES20.glCreateProgram();  \n          \n            GLES20.glAttachShader(iProgId, iVShader);  \n            GLES20.glAttachShader(iProgId, iFShader);  \n          \n            GLES20.glLinkProgram(iProgId);  \n          \n            GLES20.glGetProgramiv(iProgId, GLES20.GL_LINK_STATUS, link, 0);  \n            if (link[0] <= 0) {  \n                Log.d(\"Load Program\", \"Linking Failed\");  \n                return 0;  \n            }  \n            GLES20.glDeleteShader(iVShader);  \n            GLES20.glDeleteShader(iFShader);  \n            return iProgId;  \n        }  \n\n3. 获取纹理坐标、顶点坐标、纹理等对应id\n　　通过glGetAttribLocation和glGetUniformLocation获取对应的id\n\n        mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, \"position\"); \n        mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, \"inputImageTexture\");  \n        mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId,\"inputTextureCoordinate\");  \n\n4. 绘制\n    1）首先设置背景颜色和绘制创建绘制区域、清理当前缓冲区\n    2）使用program(glUseProgram)，传递两个矩阵\n    3）通过glGenTextures(GLsizei n, GLuint *textures)产生你要操作的纹理对象的id，然后通过glBindTexture绑定并获取纹理id，告诉OpenGL下面对纹理的任何操作都是对它所绑定的纹理对象的，比如glBindTexture(GL_TEXTURE_2D,1)告诉OpenGL下面代码中对2D纹理的任何设置都是针对索引为1的纹理的。通过glTexParameteri设置一些属性。最后通过glTexImage2D根据指定参数，包括RGB数据，生成2D纹理。当第二帧绘制的时候，则不需要重新绑定纹理，使用glTexSubImage2D更新现有纹理即可。\n\n        public static int loadTexture(final IntBuffer data, final Size size, final int usedTexId) {  \n                int textures[] = new int[1];  \n                if (usedTexId == NO_TEXTURE) {  \n                    GLES20.glGenTextures(1, textures, 0);  \n                    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0]);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);  \n                    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, size.width, size.height,  \n                            0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);  \n                } else {  \n                    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, usedTexId);  \n                    GLES20.glTexSubImage2D(GLES20.GL_TEXTURE_2D, 0, 0, 0, size.width,  \n                            size.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);  \n                    textures[0] = usedTexId;  \n                }  \n                return textures[0];  \n        }\n        \n    4）然后使用函数glActiveTexture()来指定要对其进行设置的纹理单元，这里为GL_TEXTURE0，使用glBindTexture再次绑定，通过glUniform1i复制，","source":"_posts/Android-Camera实时滤镜(1).md","raw":"title: Android_Camera实时滤镜(1)\ndate: 2016-5-1 16:04:00\ncategories: \n    - Android\n    - Camera实时滤镜\ntags: \n    - Android \n    - camera\n    - 实时滤镜\n---\n\n本文参考[Android图像处理之实时滤镜](http://blog.csdn.net/column/details/androidrealfilter.html)\n\n相关知识：\n[android-gpuimage](https://github.com/CyberAgent/android-gpuimage)/\n[OpenGL](http://blog.csdn.net/myarrow/article/details/7692044)\n\n　　目前Android平台优质的预览数据实时处理开源代码不多，例如android-gpuimage，采用将YUV数据在NDK层转化为RGB数据，由OpenGL渲染到屏幕中，滤镜算法由Shader实现。其他方面，经过研究，目前主要有以下思路实现：\n<!-- more -->\n1. 不转换，直接由OpenGL绘制，采用Shader实现图像处理（因处理算法和渲染图片大部分采用RGB格式，此方案暂不考虑，仅提出可能性）；\n2. 通过C/C++实现YUV->RGB和图像处理，合成Bitmap，由CPU绘制在Canvas上；\n3. 通过C/C++实现YUV->RGB和图像处理，在NDK层直接绘制在SurfaceView上；\n4. 通过C/C++实现YUV->RGB，采用Shader实现图像处理，采用OpenGL绘制（android-gpuimage）；\n5. 通过Shader实现YUV->RGB和图像处理，采用OpenGL绘制。（最终采用方案）\n\n　　由于方案1暂不考虑，首先从方案2探讨，Android平台的Camera使用很多博客说过了，直接跳过，在`onPreviewFrame(byte[] data, Camera camera)`中，我们可以获得相机预览，格式为YUV格式，通过C++方案转换成RGB，通过BitmapFactory合成Bitmap，通过`getHolder().lockCanvas()`获得canvas，再通过`canvas.drawBitmap`将bitmap绘制在屏幕当中。\n\n　　通过BitmapFactory创建bitmap是一个很耗时的过程，如果每一帧都创建一个bitmap，将出现严重卡顿，所以我们只需要创建一个Bitmap，将该Bitmap传递给C++层，通过JNI操作Bitmap的像素数据，即通过AndroidBitmap_lockPixels获得指针，将YUV数据转换后填充到该指针中（具体转换算法见android-gpuimage）来修改该Bitmap，避免了Bitmap的创建，经过华为Mate7试验，ARGB_8888格式1280X720大小的Bitmap每次绘制耗时6ms左右，每帧间隔50ms~60ms左右，若将图像处理算法控制在40ms~50ms内（例如YUV转换RGB算法），该方案基本可行。\n\n　　另外，可以通过方案2的思路，放弃创建Bitmap，将SurfaceView格式设置为RGB，通过JNI操作Surface，直接将数据显示在SurfaceView中，该方案仅理论思考，由于上述6ms基本达到理论要求，因此方案2并未实践验证，若有错误或者验证的同学，欢迎交流。\n\n关键代码示例：\n\n    jbyte* yuv = (jbyte*) (*env)->GetPrimitiveArrayCritical(env, yuv420sp, 0);//获取Java层传递的YUV  \n      \n    int* rgbData = NULL;//Bitmap像素数据  \n    if(AndroidBitmap_lockPixels(env,bitmap,(void**)&rgbData))  \n        return -1;  \n    for(j = 0; j < h; j++) {//YUV转RGB算法，在此添加自己的图像处理  \n        pixPtr = j * w;  \n        jDiv2 = j >> 1;  \n        for(i = 0; i < w; i++) {  \n            Y = yuv[pixPtr];  \n            if(Y < 0) \n                Y += 255;  \n            if((i & 0x1) != 1) {  \n                cOff = sz + jDiv2 * w + (i >> 1) * 2;  \n                Cb = yuv[cOff];  \n                if(Cb < 0) Cb += 127; else Cb -= 128;  \n                Cr = yuv[cOff + 1];  \n                if(Cr < 0) Cr += 127; else Cr -= 128;  \n            }  \n            Y = Y + (Y >> 3) + (Y >> 5) + (Y >> 7);  \n            R = Y + (Cr << 1) + (Cr >> 6);  \n            if(R < 0) \n                R = 0; \n            else if(R > 255) \n                R = 255;  \n            G = Y - Cb + (Cb >> 3) + (Cb >> 4) - (Cr >> 1) + (Cr >> 3);  \n            if(G < 0) \n                G = 0; \n            else if(G > 255)\n                G = 255;  \n            B = Y + Cb + (Cb >> 1) + (Cb >> 4) + (Cb >> 5);  \n            if(B < 0) \n                B = 0;\n            else if(B > 255) \n                B = 255;  \n            rgbData[pixPtr++] = 0xff000000 + (R << 16) + (G << 8) + B;//填充Bitmap  \n        }  \n    }  \n    AndroidBitmap_unlockPixels(env,bitmap);//释放锁  \n    (*env)->ReleasePrimitiveArrayCritical(env, yuv420sp, yuv, 0); \n\n　　现在介绍Android-gpuimage实现方式，即通过在C++层实现YUV-RGB转换，通过OpenGL绘制，通过片段着色器运行Shader脚本实现图像处理，虽然将滤镜的一些处理交给GPU来执行，极大的减少了速度，但YUV-RGB过程却拖了后腿。下面将从YUV、GLSL与OpenGL开始，逐步探讨方案5。\n\n> OpenGL着色语言（OpenGL Shading Language）是用来在OpenGL中着色编程的语言，也即开发人员写的短小的自定义程序，他们是在图形卡的GPU （Graphic Processor Unit图形处理单元）上执行的，代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程型。比如：视图转换、投影转换等。GLSL（GL Shading Language）的着色器代码分成2个部分：Vertex Shader（顶点着色器）和Fragment（片断着色器），有时还会有Geometry Shader（几何着色器）。负责运行顶点着色的是顶点着色器。它可以得到当前OpenGL 中的状态，GLSL内置变量进行传递。GLSL其使用C语言作为基础高阶着色语言，避免了使用汇编语言或硬件规格语言的复杂性。\n\n> 顶点着色器是一个可编程单元，执行顶点变换、纹理坐标变换、光照、材质等顶点的相关操作，每顶点执行一次。顶点着色器定义了在 2D 或者 3D 场景中几何图形是如何处理的。一个顶点指的是 2D 或者 3D 空间中的一个点。在图像处理中，有 4 个顶点：每一个顶点代表图像的一个角。顶点着色器设置顶点的位置，并且把位置和纹理坐标这样的参数发送到片段着色器。\n\n下面是GPUImage中一个顶点着色器：\n\n    attribute vec4 position;    \n    attribute vec4 inputTextureCoordinate；  \n      \n    varying vec2 textureCoordinate;  \n      \n    void main()    \n    {  \n        gl_position = position;  \n        textureCoordinate = inputTextureCoordinate.xy;  \n    }  \n\n　　attribute是只能在顶点着色器中使用的变量，来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标，顶点颜色等。\n　　varying变量是vertex和fragment shader之间做数据传递用的。一般vertex 　　shader修改varying变量的值，然后fragment 　　shader使用该varying变量的值。因此varying变量在vertex和fragment 　　shader二者之间的声明必须是一致的。\n\nattribute vec4 position;\n　　position变量是我们在程序中传给Shader的顶点数据的位置，是一个矩阵，规定了图像4个点的位置，并且可以在shader中经过矩阵进行平移、旋转等再次变换。在GPUImage中，我们根据GLSurfaceView的大小、PreviewSize的大小实现计算出矩阵，通过glGetAttribLocation获取id，再通过glVertexAttribPointer将矩阵传入。新的顶点位置通过在顶点着色器中写入gl_Position传递到渲染管线的后继阶段继续处理。结合后面绘制过程中的glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);，首先选取第三个点，与前两个点绘制成一个三角形，再选取最后一个点，与第二、第三个点绘制成三角形，最终绘制成多边形区域。\n\nattribute vec2 inputTextureCoordinate；\n　　inputTextureCoordinate是纹理坐标，纹理坐标定义了图像的哪一部分将被映射到多边形。如图所示，下图是OpenGL纹理坐标系统，左下角为原点。\n\n<div align=center>\n    <img src=\"http://img.blog.csdn.net/20151126123806218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\">\n</div>\n\n　　传入此坐标，代表输出图像不会经过变换，在GPUImage中，因为输出图像与应用方向关系，需要将图像旋转90度，即坐标为\n\n    public static final float TEXTURE_ROTATED_90[] = {  \n        1.0f, 1.0f,  \n        1.0f, 0.0f,  \n        0.0f, 1.0f,  \n        0.0f, 0.0f,  \n    }; \n\nvarying vec2 textureCoordinate\n　　因为顶点着色器负责和片段着色器交流，所以我们需要创建一个变量和它共享相关的信息。在图像处理中，片段着色器需要的唯一相关信息就是顶点着色器现在正在处理哪个像素。\n\ngl_Position = position;\n　　gl_Position是用来传输投影坐标系内顶点坐标的内建变量，GPUImage在Java层已经变换过，在这里不需要经过任何变换。\n\ntextureCoordinate = inputTextureCoordinate.xy;\n　　取出这个顶点中纹理坐标的 X 和 Y 的位置（仅需要这两个属性），然后赋值给一个将要和片段着色器通信的变量。到此，顶点着色器建立完毕。\n片段着色器：\n\n    varying highp vec2 textureCoordinate;  \n      \n    uniform sampler2D inputImageTexture;  \n      \n    void main()    \n    {  \n        gl_FragColor = texture2D(inputImageTexture, textureCoordinate);  \n    }  \n\n　　片段着色器和顶点着色器会成对出现。片段着色器扮演着显示的角色。我们的滤镜处理大部分都在片段着色器中进行。上段代码是一个无滤镜效果的片段着色器。\n\nvarying highp vec2 textureCoordinate;\n　　对应顶点着色器中变量名相同的变量，片段着色器作用在每一个像素上，我们需要一个方法来确定我们当前在分析哪一个像素/片段。它需要存储像素的 X 和 Y 坐标。我们接收到的是当前在顶点着色器被设置好的纹理坐标。\n\nuniform sampler2D inputImageTexture;\n　　uniforms变量(一致变量)用来将数据值从应用程其序传递到顶点着色器或者片元着色器。该变量有点类似C语言中的常量（const），即该变量的值不能被shader程序修改。sampler2D对应2D纹理，在GPUImage中，与onPreviewFrame中经过变换过的RGB数据绑定。GPU将从该纹理中取出点进行处理。\n\ngl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n　　这是我们碰到的第一个 GLSL 特有的方法：texture2D，顾名思义，创建一个 2D 的纹理。它采用我们之前声明过的属性作为参数来决定被处理的像素的颜色。这个颜色然后被设置给另外一个内建变量，gl_FragColor。因为片段着色器的唯一目的就是确定一个像素的颜色，gl_FragColor 本质上就是我们片段着色器的返回语句。一旦这个片段的颜色被设置，接下来片段着色器就不需要再做其他任何事情了，所以你在这之后写任何的语句，都不会被执行。\n\n到此为止，我们的Shader就写完了。\n\n在实际程序例如GPUImage中，操作顺序如下\n\n1. 创建shader\n    1）编写Vertex Shader和Fragment Shader源码。      \n    2）创建两个shader 实例：GLuint glCreateShader(GLenum type);        \n    3）给Shader实例指定源码。glShaderSource        \n    4）在线编译shaer源码 void glCompileShader(GLuint shader)\n\n        public static int loadShader(final String strSource, final int iType) {  \n            int[] compiled = new int[1];  \n            int iShader = GLES20.glCreateShader(iType);  \n            GLES20.glShaderSource(iShader, strSource);  \n            GLES20.glCompileShader(iShader);  \n            GLES20.glGetShaderiv(iShader, GLES20.GL_COMPILE_STATUS, compiled, 0);  \n            if (compiled[0] == 0) {  \n                Log.d(\"Load Shader Failed\", \"Compilation\\n\" + GLES20.glGetShaderInfoLog(iShader));  \n                return 0;  \n            }  \n            return iShader;  \n        }  \n\n2. 创建program\n    　　在OpenGL ES中，每个program对象有且仅有一个Vertex Shader对象和一个Fragment Shader对象连接到它。Shader类似于C编译器。Program类似于C链接器。glLinkProgram操作产生最后的可执行程序，它包含最后可以在硬件上执行的硬件指令。\n\n    1）创建program ：GLuint glCreateProgram(void)       \n    2）绑定shader到program ：void glAttachShader(GLuint program, GLuint shader)。每个program必须绑定一个Vertex Shader 和一个Fragment Shader。       \n    3）链接program ：void glLinkProgram(GLuint program)        \n    4）使用porgram ：void glUseProgram(GLuint program)\n\n        public static int loadProgram(final String strVSource, final String strFSource) {  \n            int iVShader;  \n            int iFShader;  \n            int iProgId;  \n            int[] link = new int[1];  \n            iVShader = loadShader(strVSource, GLES20.GL_VERTEX_SHADER);  \n            if (iVShader == 0) {  \n                Log.d(\"Load Program\", \"Vertex Shader Failed\");  \n                return 0;  \n            }  \n            iFShader = loadShader(strFSource, GLES20.GL_FRAGMENT_SHADER);  \n            if (iFShader == 0) {  \n                Log.d(\"Load Program\", \"Fragment Shader Failed\");  \n                return 0;  \n            }  \n          \n            iProgId = GLES20.glCreateProgram();  \n          \n            GLES20.glAttachShader(iProgId, iVShader);  \n            GLES20.glAttachShader(iProgId, iFShader);  \n          \n            GLES20.glLinkProgram(iProgId);  \n          \n            GLES20.glGetProgramiv(iProgId, GLES20.GL_LINK_STATUS, link, 0);  \n            if (link[0] <= 0) {  \n                Log.d(\"Load Program\", \"Linking Failed\");  \n                return 0;  \n            }  \n            GLES20.glDeleteShader(iVShader);  \n            GLES20.glDeleteShader(iFShader);  \n            return iProgId;  \n        }  \n\n3. 获取纹理坐标、顶点坐标、纹理等对应id\n　　通过glGetAttribLocation和glGetUniformLocation获取对应的id\n\n        mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, \"position\"); \n        mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, \"inputImageTexture\");  \n        mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId,\"inputTextureCoordinate\");  \n\n4. 绘制\n    1）首先设置背景颜色和绘制创建绘制区域、清理当前缓冲区\n    2）使用program(glUseProgram)，传递两个矩阵\n    3）通过glGenTextures(GLsizei n, GLuint *textures)产生你要操作的纹理对象的id，然后通过glBindTexture绑定并获取纹理id，告诉OpenGL下面对纹理的任何操作都是对它所绑定的纹理对象的，比如glBindTexture(GL_TEXTURE_2D,1)告诉OpenGL下面代码中对2D纹理的任何设置都是针对索引为1的纹理的。通过glTexParameteri设置一些属性。最后通过glTexImage2D根据指定参数，包括RGB数据，生成2D纹理。当第二帧绘制的时候，则不需要重新绑定纹理，使用glTexSubImage2D更新现有纹理即可。\n\n        public static int loadTexture(final IntBuffer data, final Size size, final int usedTexId) {  \n                int textures[] = new int[1];  \n                if (usedTexId == NO_TEXTURE) {  \n                    GLES20.glGenTextures(1, textures, 0);  \n                    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0]);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);  \n                    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,  \n                            GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);  \n                    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, size.width, size.height,  \n                            0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);  \n                } else {  \n                    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, usedTexId);  \n                    GLES20.glTexSubImage2D(GLES20.GL_TEXTURE_2D, 0, 0, 0, size.width,  \n                            size.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);  \n                    textures[0] = usedTexId;  \n                }  \n                return textures[0];  \n        }\n        \n    4）然后使用函数glActiveTexture()来指定要对其进行设置的纹理单元，这里为GL_TEXTURE0，使用glBindTexture再次绑定，通过glUniform1i复制，","slug":"Android-Camera实时滤镜(1)","published":1,"updated":"2016-05-13T06:29:01.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio5chjgb002120ml71y605vx"}],"PostAsset":[],"PostCategory":[{"post_id":"cio5chjf0000520mlzkxvgqqi","category_id":"cio5chjf0000620mlj4s9f0j7","_id":"cio5chjfg000920mleqff70fz"},{"post_id":"cio5chjfg000c20ml2sypjkew","category_id":"cio5chjfg000d20mlnh79ltat","_id":"cio5chjfg000g20mlgq6xsaml"},{"post_id":"cio5chjfg000j20mlo5v4k6xo","category_id":"cio5chjfg000k20ml67issfyn","_id":"cio5chjfg000n20mloid2hpls"},{"post_id":"cio5chjfg000q20mlpwllb77h","category_id":"cio5chjfg000k20ml67issfyn","_id":"cio5chjfg000r20mljci7o48q"},{"post_id":"cio5chjfg000v20mlefj9m25w","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjfv000z20ml0tg3tjt7"},{"post_id":"cio5chjfv001420ml3lzd9ihf","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjfv001520mlhhqdv5r8"},{"post_id":"cio5chjfv001920ml9bhvd2gm","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjfv001a20ml2vrmmsu4"},{"post_id":"cio5chjfv001e20mldfthvait","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjfv001f20ml30jd2pxf"},{"post_id":"cio5chjfv001j20ml2bq2ny2f","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjfv001k20mlvfej48ir"},{"post_id":"cio5chjgb001o20ml9d4y6eqo","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjgb001p20ml4hl1qvdy"},{"post_id":"cio5chjgb001s20mlm3tpk9cl","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjgb001w20mlwi7wzl7x"},{"post_id":"cio5chjgb001s20mlm3tpk9cl","category_id":"cio5chjgb001t20mlpyau0b8i","_id":"cio5chjgb001x20mlgmbkwllb"},{"post_id":"cio5chjgb002120ml71y605vx","category_id":"cio5chjfg000w20mlhq53vvwc","_id":"cio5chjgb002520ml1w4pwk1r"},{"post_id":"cio5chjgb002120ml71y605vx","category_id":"cio5chjgb002220mlrhbf8749","_id":"cio5chjgb002620mll5hy50ky"}],"PostTag":[{"post_id":"cio5chjf0000520mlzkxvgqqi","tag_id":"cio5chjf0000720mlw2nkl376","_id":"cio5chjfg000a20mlyufhhg68"},{"post_id":"cio5chjf0000520mlzkxvgqqi","tag_id":"cio5chjfg000820ml7zyb4hp1","_id":"cio5chjfg000b20mlbp5xa0ep"},{"post_id":"cio5chjfg000c20ml2sypjkew","tag_id":"cio5chjfg000e20mlb57opwem","_id":"cio5chjfg000h20ml2qprbiri"},{"post_id":"cio5chjfg000c20ml2sypjkew","tag_id":"cio5chjfg000f20mlj054u1wm","_id":"cio5chjfg000i20ml10g64kau"},{"post_id":"cio5chjfg000j20mlo5v4k6xo","tag_id":"cio5chjfg000l20ml9z3x1qgy","_id":"cio5chjfg000o20mlh5ahvotl"},{"post_id":"cio5chjfg000j20mlo5v4k6xo","tag_id":"cio5chjfg000m20ml616hc4ik","_id":"cio5chjfg000p20ml0r42fcbp"},{"post_id":"cio5chjfg000q20mlpwllb77h","tag_id":"cio5chjfg000l20ml9z3x1qgy","_id":"cio5chjfg000t20ml29jyml2b"},{"post_id":"cio5chjfg000q20mlpwllb77h","tag_id":"cio5chjfg000s20ml447v6fbg","_id":"cio5chjfg000u20ml4v6p5e6m"},{"post_id":"cio5chjfg000v20mlefj9m25w","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjfv001120ml1o941at2"},{"post_id":"cio5chjfg000v20mlefj9m25w","tag_id":"cio5chjfv000y20ml55aamnp4","_id":"cio5chjfv001220mlxql02yr5"},{"post_id":"cio5chjfg000v20mlefj9m25w","tag_id":"cio5chjfv001020mllek54au8","_id":"cio5chjfv001320mlc0mwqg4t"},{"post_id":"cio5chjfv001420ml3lzd9ihf","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjfv001720mlan7qb4wb"},{"post_id":"cio5chjfv001420ml3lzd9ihf","tag_id":"cio5chjfv001620mlt81ueo6q","_id":"cio5chjfv001820ml8cz82p74"},{"post_id":"cio5chjfv001920ml9bhvd2gm","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjfv001c20ml4hi3mrl1"},{"post_id":"cio5chjfv001920ml9bhvd2gm","tag_id":"cio5chjfv001b20ml9dk04mrq","_id":"cio5chjfv001d20mlxurxkk0y"},{"post_id":"cio5chjfv001e20mldfthvait","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjfv001h20mloorlo6mw"},{"post_id":"cio5chjfv001e20mldfthvait","tag_id":"cio5chjfv001g20mleaxdhngt","_id":"cio5chjfv001i20mlfzpwcznj"},{"post_id":"cio5chjfv001j20ml2bq2ny2f","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjfv001m20mlpr2084u9"},{"post_id":"cio5chjfv001j20ml2bq2ny2f","tag_id":"cio5chjfv001l20mlxn4x8g3h","_id":"cio5chjfv001n20ml43sl04x7"},{"post_id":"cio5chjgb001o20ml9d4y6eqo","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjgb001q20ml5noamhm3"},{"post_id":"cio5chjgb001o20ml9d4y6eqo","tag_id":"cio5chjfv001020mllek54au8","_id":"cio5chjgb001r20mlah129a2t"},{"post_id":"cio5chjgb001s20mlm3tpk9cl","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjgb001y20ml5qaczezi"},{"post_id":"cio5chjgb001s20mlm3tpk9cl","tag_id":"cio5chjgb001u20mlgpm9kw3m","_id":"cio5chjgb001z20mllfsb7z21"},{"post_id":"cio5chjgb001s20mlm3tpk9cl","tag_id":"cio5chjgb001v20mlc69605yd","_id":"cio5chjgb002020mlgzudvghg"},{"post_id":"cio5chjgb002120ml71y605vx","tag_id":"cio5chjfg000x20mlilv18vvs","_id":"cio5chjgb002720ml8u8q7d02"},{"post_id":"cio5chjgb002120ml71y605vx","tag_id":"cio5chjgb002320mlrk72gf19","_id":"cio5chjgb002820mlmdh9syvo"},{"post_id":"cio5chjgb002120ml71y605vx","tag_id":"cio5chjgb002420mllnkigzpi","_id":"cio5chjgb002920mlopuem4gb"}],"Tag":[{"name":"开启Log","_id":"cio5chjf0000720mlw2nkl376"},{"name":"华为","_id":"cio5chjfg000820ml7zyb4hp1"},{"name":"sublime","_id":"cio5chjfg000e20mlb57opwem"},{"name":"插件","_id":"cio5chjfg000f20mlj054u1wm"},{"name":"Java","_id":"cio5chjfg000l20ml9z3x1qgy"},{"name":"遍历Map","_id":"cio5chjfg000m20ml616hc4ik"},{"name":"String format","_id":"cio5chjfg000s20ml447v6fbg"},{"name":"Android","_id":"cio5chjfg000x20mlilv18vvs"},{"name":"高斯模糊","_id":"cio5chjfv000y20ml55aamnp4"},{"name":"RenderScript","_id":"cio5chjfv001020mllek54au8"},{"name":"OpenCV","_id":"cio5chjfv001620mlt81ueo6q"},{"name":"基础知识","_id":"cio5chjfv001b20ml9dk04mrq"},{"name":"Audio Focus","_id":"cio5chjfv001g20mleaxdhngt"},{"name":"ffmpeg编译","_id":"cio5chjfv001l20mlxn4x8g3h"},{"name":"MediaPlayer","_id":"cio5chjgb001u20mlgpm9kw3m"},{"name":"状态机","_id":"cio5chjgb001v20mlc69605yd"},{"name":"camera","_id":"cio5chjgb002320mlrk72gf19"},{"name":"实时滤镜","_id":"cio5chjgb002420mllnkigzpi"}]}}